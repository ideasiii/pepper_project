<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Record Sound for Google STT" id="4" localization="8" tooltip='Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head microphones) in wav format.&#x0A;&#x0A;If &quot;Temporary storage&quot; isn&apos;t checked, the output sound file is located in &quot;~/recordings/microphones/&lt;File name&gt;&quot;.&#x0A;Else, it is located in a temporary directory&#x0A;&#x0A;The onStopped output is stimulated at the end of the recording and contains the absolute path to the output sound file&#x0A;&#x0A;V1.1.0&#x0A;' x="1512" y="15"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="3" value="recording" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" /><Parameter name="Microphones used" inherits_from_parent="0" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="6"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter><Parameter name="Temporary storage" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is disabled the file is stored in ~/recordings/microphones. You can&#x0A;then get it on your computer using the menu Connection/File transfer.&#x0A;&#x0A;When this option is enabled the file is stored in the temporary folder of the behavior." id="7" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="5" min="0.1" max="60" tooltip="Duration of the recording in seconds." id="8" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Rec. Sound File" id="4" localization="8" tooltip="Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head&#x0A;microphones) in wav format." x="562" y="100"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            #self.ad = ALProxy("ALAudioDevice")
            self.audioRecorder = ALProxy("ALAudioRecorder")
        except Exception as e:
            #self.ad = None
            self.audioRecorder = None
            self.logger.error(e)
        self.filepath = ""

    def onLoad(self):
        self.bIsRecording = False
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False
        if( self.bIsRecording ):
            #self.ad.stopMicrophonesRecording()
            self.audioRecorder.stopMicrophonesRecording()
            self.bIsRecording = False

    def onInput_onStart(self, p):
        if(self.bIsRunning):
            return
        self.bIsRunning = True
        sExtension = self.toExtension( self.getParameter("Microphones used") )
        self.filepath = p + sExtension
        #if self.ad:
        if self.audioRecorder:
            channels = [0, 0, 1, 0]
            self.audioRecorder.startMicrophonesRecording(self.filepath, "wav", 16000, channels)
            #self.ad.startMicrophonesRecording( self.filepath )
            self.bIsRecording = True
        else:
            self.logger.warning("No sound recorded")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped(self.filepath)

    def toExtension(self, sMicrophones):
        if( sMicrophones == "Front head microphone only (.ogg)" ):
            return ".ogg"
        else:
            return ".wav"]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound. The data received on this input must be the&#x0A;filename of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="Microphones used" inherits_from_parent="1" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="5"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter></Box><Box name="Wait" id="13" localization="8" tooltip="Wait a moment before sending a bang on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start over." x="420" y="161"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="1" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /></Box><Box name="Get File Name" id="10" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="234" y="95"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[import os
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        if( self.getParameter("Temporary storage") ):
            import tempfile
            path = tempfile.mkdtemp() + "/"
        else:
            path = os.path.expanduser('~') + "/recordings/microphones/"
        self.onStopped( path + self.getParameter("File name") )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="3" value="recording" default_value="" custom_choice="0" tooltip="Name of the file." id="4" /><Parameter name="Temporary storage" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is enabled the file is stored in ~/.cache/currentChoregrapheBehavior&#x0A;or in ~/.cache/&lt;project_name&gt; when you play the behavior from the&#x0A;behavior manager.&#x0A;&#x0A;When it is disabled the file is stored in ~/recordedSounds. You can&#x0A;then get it on your computer using the menu Connection/File transfer." id="5" /></Box><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="4" indexofinput="3" outputowner="13" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="2" outputowner="10" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio recorder" type="Lock" timeout="0" /></Box><Box name="Semantic Word Story Box" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1860" y="23"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        #self.onStopped() #activate the output of the box

        from semantic_word import SemanticWordStory

        if isinstance(p,str) and (len(p) is not 0):
            str_question = p

            self.logger.debug("start semantic word")
            self.logger.debug("Server IP:"+ self.getParameter("Server_IP"))
            self.logger.debug("Server Port:"+str(self.getParameter("Server_Port")))
            test = SemanticWordStory(self.getParameter("Server_IP"),self.getParameter("Server_Port"))
            result_data = test.send_word(str_question)

            self.logger.debug(result_data)

            from socket_module import CMPSocketPacketStatus
            if result_data["result_code"] == CMPSocketPacketStatus.STATUS_ROK:

                self.onStopped(result_data["result_data"])
            else:
                self.logger.debug("something error while link to semantic server")
                error_message = json.dumps({"error_message":"something error while link to semantic server","result_code": result_data["result_code"],"error_from":"semantic"})
                self.onFailed(error_message)
        else:
            self.logger.debug("input parmeter is not correct")
            error_message = json.dumps({"error_message":"input parmeter is not correct","result_code": -1010,"error_from":"semantic"})
            self.onFailed(error_message)



    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped("") #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onFailed" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Server_IP" inherits_from_parent="0" content_type="3" value="54.199.198.94" default_value="" custom_choice="0" tooltip="" id="6" /><Parameter name="Server_Port" inherits_from_parent="0" content_type="1" value="2310" default_value="0" min="0" max="9999" tooltip="" id="7" /></Box><Box name="Speech Reco." id="6" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="925" y="29"><bitmap>media/images/box/interaction/ear.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                self.logger.debug("1")
                if (self.hasSubscribed):
                    self.logger.debug("2")
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                    self.logger.debug("3")
                if (self.hasPushed and self.asr):
                    self.logger.debug("4")
                    self.asr.pause(True)
                    self.logger.debug("5")
                    self.asr.popContexts()
                    self.logger.debug("5")
                    self.asr.pause(False)
                    self.logger.debug("6")

        except RuntimeError, e:
            self.mutex.release()
            self.logger.debug(e)
            #raise e
        except Exception , e:
            self.logger.debug(e)
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pause(True)
                self.asr.pushContexts()
                self.asr.pause(False)
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.logger.debug("in line 66")
            self.logger.debug(e)
            self.mutex.release()
            self.onUnload()

        try:
            self.mutex.release()
        except Exception, e:
            self.logger.debug(e)

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.logger.debug("stop speech reco.")
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            if( self.bIsRunning ):
                self.onUnload()
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="wordRecognized" type="3" type_size="1" nature="1" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" /><Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" /><Parameter name="Word list" inherits_from_parent="0" content_type="3" value="我要聽故事;我要聊天" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" /><Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="40" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" /><Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" /><Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="HTTP Google Cloud STT (1)" id="10" localization="8" tooltip="" x="1669" y="15"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import os
import json
import requests
import urllib
import base64


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):

        filepath = p
        self.logger.debug("record audio path:"+filepath)
        try:

            self.logger.debug("start up for google api!")

            str_url = "https://content-speech.googleapis.com/v1/speech:recognize?alt=json&key="+self.getParameter("GOOGLE_API_KEY")

            audio_data = open(filepath, "rb").read()

            dic_config = {"sampleRateHertz": 16000,"languageCode": "zh-TW","enableWordTimeOffsets": False}
            dic_audio = {"content":base64.b64encode(audio_data)}
            dic_request_body = {"config": dic_config,"audio": dic_audio}

            raw_http_response_data = requests.post(
                str_url,
                headers="",
                data=json.dumps(dic_request_body),
                timeout=self.getParameter("Timeout")
            )

            dic_response_data = json.loads(raw_http_response_data.text)


            self.logger.debug("get return google data: "+str(dic_response_data))


            if "results" not in dic_response_data:
                self.logger.debug("google data error!!")
                error_json = json.dumps({"result_code":-1010,"error_from":"google stt","error_message":"can not get any text from voice"})
                self.onFailed(error_json)
            else:
                str_stt_text = dic_response_data["results"][0]["alternatives"][0]["transcript"]
                self.onStopped(str_stt_text.encode("utf-8"))

        except requests.exceptions.RequestException, message:
            self.logger.error(str(message))
            error_json = json.dumps({"result_code":-1013,"error_from":"google stt","error_message":str(message)})
            self.onFailed(error_json)

        except ValueError ,message:
            self.logger.error(str(message))
            error_json = json.dumps({"result_code":-1013,"error_from":"google stt","error_message":str(message)})
            self.onFailed(error_json)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onFailed" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Timeout" inherits_from_parent="0" content_type="1" value="5" default_value="10" min="1" max="3600" tooltip="" id="6" /><Parameter name="GOOGLE_API_KEY" inherits_from_parent="0" content_type="3" value="AIzaSyD3Q7EjbRIKyiti797ncj7gr4rOtnOaIYA" default_value="YOUR_API_KEY" custom_choice="0" tooltip="" id="7" /></Box><Box name="FailedHandle" id="12" localization="8" tooltip="Enter description here" x="2353" y="1264"><bitmap>media/images/box/interaction/uramark.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onFailedHandler_onStart" type="3" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="OnFailedHandler" id="7" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="435" y="221"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):


        import json
        dic_error_msg=json.loads(p)
        dic_result_code = {-1010:"不清楚您在說什麼喔",-1013:"連線異常，請檢查連線是否有出錯",-1016:"無法與伺服器連線更新故事"}
        dic_error_from = {"google stt":"錯誤於谷哥文字轉語音","semantic":"錯誤於語意分析伺服器","semantic ftp":"錯誤於下載故事檔案"}



        error_message = (dic_result_code[dic_error_msg["result_code"]])#+(dic_error_from[dic_error_msg["error_from"]])
        self.onStopped(error_message)


        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="SayErrorMessage" id="11" localization="8" tooltip="Say the text received on its input." x="728" y="230"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Confused" id="16" localization="8" tooltip="ID : #02C 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Confused" x="749" y="112"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="82"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="27" value="-14.3298" /><Key frame="47" value="-16.8787" /><Key frame="67" value="-13.8903" /><Key frame="82" value="-16.8787" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="27" value="-2.72224" /><Key frame="47" value="4.45315" /><Key frame="67" value="-9.60496" /><Key frame="82" value="0.00240423" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="19" value="3" /><Key frame="39" value="-3" /><Key frame="59" value="3" /><Key frame="79" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-46.4923" /><Key frame="45" value="-67.9379" /><Key frame="65" value="-61.0823" /><Key frame="79" value="-67.9379" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-28.3914" /><Key frame="45" value="-55.7258" /><Key frame="65" value="-68.7337" /><Key frame="79" value="-55.7258" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="45" value="0.58" /><Key frame="79" value="0.17" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="69.8715" /><Key frame="45" value="73.7388" /><Key frame="65" value="75.4087" /><Key frame="79" value="73.7388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="0.498473" /><Key frame="45" value="7.3" /><Key frame="65" value="2.89802" /><Key frame="79" value="9.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="45" value="-43" /><Key frame="79" value="-26.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="69.8763" /><Key frame="45" value="79.896" /><Key frame="65" value="65.9212" /><Key frame="79" value="79.896" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="44.4708" /><Key frame="45" value="55.1936" /><Key frame="65" value="69.6078" /><Key frame="79" value="55.1936" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="45" value="0.527273" /><Key frame="79" value="0.15" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="76.3803" /><Key frame="45" value="73.8315" /><Key frame="65" value="83.148" /><Key frame="79" value="73.8315" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-0.529755" /><Key frame="45" value="-8.5" /><Key frame="65" value="-0.969213" /><Key frame="79" value="-9.8" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="45" value="52" /><Key frame="79" value="31" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="showStringToHTML" id="25" localization="8" tooltip="" x="737" y="351"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="11" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="3" outputowner="11" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="25" indexofinput="2" outputowner="7" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="PepperInit" id="7" localization="8" tooltip="Enter description here" x="63" y="552"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Get Pyton File Attached_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="SetRecoLang_onReady" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Output name="onFailed" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Set Reco. Lang." id="5" localization="8" tooltip="Select the language you would like the robot to recognize. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) will use this language.&#x0A;&#x0A;V1.1.0" x="279" y="8"><bitmap>media/images/box/interaction/reco_voice.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try :
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)

    def onInput_onSet(self):
        if self.asr:
            self.asr.setLanguage( self.getParameter("Language") )
        self.onReady()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="Chinese" default_value="English" custom_choice="1" tooltip="Set the language the robot understands." id="4"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Get Pyton File Attached" id="8" localization="8" tooltip="use this box to add self python lib" x="53" y="8"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self,False)

    def onLoad(self):
        #put initialization code here
        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = None

    def onUnload(self):
        import sys
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)


    def onInput_onStart(self):
        self.folderName = self.framemanager.getBehaviorPath(self.behaviorId)+self.getParameter("File name")
        self.logger.info("read python file: "+ self.folderName)
        import sys
        if self.folderName not in sys.path:
            sys.path.insert(0, self.folderName)
            self.logger.debug("read python file: "+ self.folderName)
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="" default_value="" tooltip="" id="4" /></Box><Box name="Set Language" id="2" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="164" y="54"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="Chinese" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="StoryServerInit" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="448" y="147"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
import json
import ftplib
import os
from codecs import open

class FTPReader:
    def __init__(self):
        self.data = ""
    def __call__(self,s):
        self.data += s


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def save_or_load_data(self,is_save,file_path,file_name,data_key,data_value):
        if is_save is True:

            if not os.path.exists(file_path):
                os.makedirs(file_path)

            with open(file_path+"/"+file_name, 'w',encoding= 'utf-8') as outfile:
                data = {data_key:data_value}
                json.dump(data, outfile)
        else:
            with open(file_path+"/"+file_name) as json_data:
                d = json.load(json_data)
                return d[data_key]


    def onLoad(self):
        #put initialization code here

        pass

    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_onStart(self):

        try:
            ftp = ftplib.FTP(self.getParameter("FTP_IP"))
            ftp.set_pasv(False)
            ftp.login(self.getParameter("FTP_User"), self.getParameter("FTP_Password"))

            r = FTPReader()
            ftp.retrbinary('RETR init.txt', r)


            json_data = json.loads(r.data)
        except Exception,e:
            self.logger.debug(e)
            self.logger.debug("some wrong in init server!!")
            update_dic_data = {"need_update":-1}
            self.onStopped(json.dumps(update_dic_data))
            return


        #update story list
        self.save_or_load_data(True,"/home/nao/stories","story_list.txt","story_list",json_data["story_list"])


        #save story list len in mem
        try:
            memProxy = ALProxy("ALMemory","localhost",9559)
            memProxy.insertData("STORY_TOTAL_NUM", len(json_data["story_list"]))
        except RuntimeError,e:
         # catch exception
            self.logger.debug("something error in save var to mem")
            self.logger.debug(e)

        server_story_version = json_data["story_version"]
        local_story_version = 0


        try:
            local_story_version = self.save_or_load_data(False,"/home/nao/stories","story_version.txt","local_story_version","")

        except IOError , e:
            self.logger.debug(e)




        if local_story_version < server_story_version:
            try:
                self.logger.debug("update local_story_version")
                self.save_or_load_data(True,"/home/nao/stories","story_version.txt","local_story_version",server_story_version)

                json_data["need_update"] = 1


                update_dic_data = {"need_update":1,"ftp_ip":self.getParameter("FTP_IP"),"ftp_user":self.getParameter("FTP_User"),"ftp_password":self.getParameter("FTP_Password"),"story_list":json_data["story_list"]}

                self.logger.debug(json.dumps(update_dic_data))
                self.onStopped(json.dumps(update_dic_data))
            except IOError , e:
                self.logger.debug(e)

        else:
            self.logger.debug("from server: story are newest")
            self.logger.debug("check local file exist?")

            local_file_list = []
            for file_name in os.listdir("/home/nao/stories"):
                if file_name.endswith(".ogg"):
                    #self.logger.debug(os.path.join("/home/nao/stories", file))
                    #self.logger.debug("file size: "+str(os.path.getsize(os.path.join("/home/nao/stories", file))))
                    if os.path.getsize(os.path.join("/home/nao/stories", file_name)) == 0:
                        os.remove((os.path.join("/home/nao/stories", file_name)))

                    else:
                        local_file_list.append(file_name)

            need_to_update_story_list = self.check_if_need_update(local_file_list,json_data["story_list"])

            if len(need_to_update_story_list) ==0:
                update_dic_data = {"need_update":0}
            else:
                update_dic_data = {"need_update":1,"ftp_ip":self.getParameter("FTP_IP"),"ftp_user":self.getParameter("FTP_User"),"ftp_password":self.getParameter("FTP_Password"),"story_list":need_to_update_story_list}

            self.onStopped(json.dumps(update_dic_data))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box


    def check_if_need_update(self, file_list, json_data_list):

        need_to_update_story_list = []

        for json_story_data in json_data_list:

            is_found = False

            for file_name in file_list:
                if str(json_story_data["story_id"]) == file_name[:-4]:
                    is_found = True
                    break
            if is_found == False:
                need_to_update_story_list.append(json_story_data)

        #self.logger.debug(need_to_update_story_list)

        return need_to_update_story_list]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="FTP_IP" inherits_from_parent="0" content_type="3" value="54.199.198.94" default_value="" custom_choice="0" tooltip="" id="5" /><Parameter name="FTP_User" inherits_from_parent="0" content_type="3" value="moreftp" default_value="" custom_choice="0" tooltip="" id="6" /><Parameter name="FTP_Password" inherits_from_parent="0" content_type="3" value="hope123!" default_value="" custom_choice="0" tooltip="" id="7" /></Box><Box name="Python Script" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="630" y="277"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time
from naoqi import ALProxy
import os, os.path
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.is_init = False
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        memProxy = ALProxy("ALMemory","localhost",9559)

        #get data. Val can be int, float, list, string
        total_story_num = memProxy.getData("STORY_TOTAL_NUM")
        self.logger.debug("total_story num"+str(total_story_num))
        while self.is_init is False:
            # simple version for working with CWD
            now_story_num = len([name for name in os.listdir("/home/nao/stories") if os.path.isfile(os.path.join("/home/nao/stories", name))])-2

            self.logger.debug("now_story_num"+ str(now_story_num))
            self.say("目前初始化中，請稍等目前已完成百分之"+str((now_story_num*100)/total_story_num))
            time.sleep( 40 )



    def onInput_onStop(self):

        self.is_init = True

        time.sleep(5)

        import argparse

        self.done() #activate the output of the box

    def onInput_onFailed(self,p):

        self.is_init = True

        self.failed(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onFailed" type="3" type_size="1" nature="3" inner="0" tooltip="" id="4" /><Output name="say" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="done" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="failed" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /></Box><Box name="threadDownloadStory" id="9" localization="8" tooltip="" x="587" y="41"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[# -*- coding: utf-8 -*-
from ftplib import FTP
import json, threading, time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.err = 0
        self.arr_fail_download_stories = []
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def download(self, stories):



        #self.logger.debug("id: " + str(id))
        #self.logger.debug("name: " + str(name))
        self.logger.debug(stories)
        for story in stories:
            try:
                ftp = FTP("54.199.198.94")
                ftp.set_pasv(False)
                ftp.encoding='utf-8'
                ftp.login("moreftp", "hope123!")
                ftp.cwd('story')
                id = story.get("story_id")

                name = story.get("story_name").split(".")[0]

                file = open("/home/nao/stories/" + str(id) + ".ogg", "wb")
                filename = name.encode("utf-8") + ".ogg"

                #self.logger.debug(str(name.decode("unicode-escape").encode("utf8")))
                #return


                self.logger.debug("Start downloading " + str(filename))
                cmd = "RETR " + filename
                ftp.retrbinary(cmd, file.write, 2048)
                self.logger.debug("Finished downloading " + str(filename))
            except Exception as e:

                self.arr_fail_download_stories.append(story)
                self.logger.debug(e)
            finally:
                try:
                    ftp.quit()
                    file.close()
                    ftp.close()
                except Exception as es:
                    self.logger.debug(es)

        #self.logger.debug("End Downloading")

    def onInput_onStart(self, p):
        #self.onStopped() #activate the output of the box
        THREAD_NUM = 5
        data = json.loads(p)
        stories = data.get("story_list")

        if data.get("need_update") == 0:
            self.onStopped()
            return
        elif stories == None:
            self.onStopped()
            return
        elif len(stories) == 0:
            self.onStopped()
            return
        elif data.get("need_update") == -1:
            error_message = {
                "error_message" : "story can not downloas from ftp",
                "result_code" : -1016,
                "error_from" : "semantic ftp"
            }
            self.onFailed(str(error_message))

        thrds = list()
        part = len(stories)//THREAD_NUM
        if len(stories) % THREAD_NUM != 0:
            part += 1

        for i in range(0, THREAD_NUM):
            end = (i+1)*part if i != THREAD_NUM-1 else len(stories)
            p = stories[i*part:end]
            #self.logger.debug(str(i) + str(p))
            tmpthrd = threading.Thread(target=self.download, name="Thrd" + str(i), args=(p,))

            self.logger.debug("Starting Thrd " + str(i))
            self.logger.debug("Starting Thrd " + str(i)+ " start: "+str(i*part)+" to: "+ str(end))
            tmpthrd.start()
            thrds.append(tmpthrd)
            time.sleep(1)
            #break

        for thrd in thrds:
            if thrd.is_alive() == True:
                self.logger.debug("Joining " + thrd.name)
                thrd.join()
            else:
                self.logger.debug(thrd.name + " finished")

        self.logger.debug("Endded for loop")


        while len(self.arr_fail_download_stories) !=0:

            tmp = self.arr_fail_download_stories
            self.arr_fail_download_stories =[]

            tmp_thread = threading.Thread(target=self.download, name="second choice", args=(tmp,))
            tmp_thread.start()
            tmp_thread.join()






        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onFailed" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Box name="WakeUp" id="11" localization="0" tooltip="Call a Wake Up process.&#x0A;Stiff all joints and apply stand Init posture if the robot is Stand" x="890" y="606"><bitmap>media/images/box/movement/stiffness.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.motion.wakeUp()
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Show Sign" id="3" localization="8" tooltip="Enter description here" x="1068" y="663"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Show App_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="ShowWebView_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show Web View" id="8" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="620" y="144"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            tabletService.showWebview()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Show App" id="2" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="436" y="144"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self.packageUid()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="8" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Say Still INIT " id="10" localization="8" tooltip="Say the text received on its input." x="934" y="110"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="TCInit" id="6" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="872" y="753"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import requests
from naoqi import ALProxy
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memProxy = ALProxy("ALMemory","localhost",9559)
        back_up_json = {"story_pause":"我說的故事好聽嗎？你想繼續聽故事嗎？","chat_start":"你想知道什麼呢？","story_start":"你想要聽什麼故事呢？","story_stop":"好吧！那我們下次再繼續。","face_detection":["歡迎光臨，資策會服創所歡迎您","你好，我會說故事給你聽喔，跟我說故事名就可以囉","嗨，今天想要聽什麼故事呢？"],"pepper_greeting":"你好，我是Pepper，我很會說故事喔！我有許多關於動物的有趣故事想要說給你聽，你想聽故事嗎？說故事時間要開始囉！","pepper_bye":"這次的說故事時間要結束了，我們下次在一起聽故事喔！拜拜！","story_resume":"好喔，那我繼續播放囉！"}

        raw_response_data = requests.get("http://service.inmedia.com.tw/task/api/pepper.do")

        if raw_response_data.status_code == requests.codes.ok:

            #insertData. Value can be int, float, list, string
            voice_json=json.loads(raw_response_data.text)["voices"]

            memProxy.insertData("TC_JSON_DATA",json.dumps(voice_json))

            self.logger.debug("TC is aready inited!")
        else:
            #set default mem data
            memProxy.insertData("TC_JSON_DATA", json.dumps(back_up_json))
        memProxy.insertData("IS_CONTINUE_STORY_MODE",0)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="12" localization="8" tooltip="Say the text received on its input." x="1146" y="355"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="850" y="360"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("初始化已完成，開始故事模式")]]></content></script><pluginContent><text><![CDATA[初始化已完成，開始故事模式]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="showStringToHTML" id="7" localization="8" tooltip="" x="1149" y="474"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="showStringToHTML (1)" id="14" localization="8" tooltip="" x="814" y="49"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="7" /><Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="4" indexofinput="3" outputowner="9" indexofoutput="4" /><Link inputowner="4" indexofinput="4" outputowner="9" indexofoutput="5" /><Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="5" /><Link inputowner="10" indexofinput="3" outputowner="4" indexofoutput="6" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="6" /><Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="6" /><Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="3" /><Link inputowner="0" indexofinput="3" outputowner="12" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="6" /><Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="3" /><Link inputowner="14" indexofinput="2" outputowner="4" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="SayWelcome" id="2" localization="8" tooltip="Enter description here" x="1367" y="7"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Text Edit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="SayText_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="842" y="20"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Thinking" id="14" localization="8" tooltip="ID : #02B 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Thinking" x="616" y="217"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="140"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-6.5" /><Key frame="31" value="12.8913" /><Key frame="80" value="11.5" /><Key frame="119" value="13.8" /><Key frame="131" value="7.2" /><Key frame="140" value="-11.9668" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="31" value="8.87482" /><Key frame="119" value="9.00008" /><Key frame="140" value="-17.4791" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="15" value="-2.34809" /><Key frame="31" value="-12.3926" /><Key frame="105" value="-19.9512" /><Key frame="128" value="-2.48279" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="15" value="0" /><Key frame="31" value="-3.25195" /><Key frame="105" value="-2.02149" /><Key frame="128" value="-0.197286" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="15" value="-0.634643" /><Key frame="31" value="1.66993" /><Key frame="105" value="4.30664" /><Key frame="128" value="-0.742038" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="17" value="-45.8" /><Key frame="29" value="-85.0768" /><Key frame="117" value="-86.9" /><Key frame="129" value="-87.9" /><Key frame="138" value="-78.9185" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="17" value="-80.4" /><Key frame="29" value="-54.7589" /><Key frame="117" value="-52.1" /><Key frame="138" value="-88.7261" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="17" value="0.96" /><Key frame="29" value="0.7036" /><Key frame="43" value="0.44" /><Key frame="53" value="0.73" /><Key frame="68" value="0.44" /><Key frame="78" value="0.73" /><Key frame="95" value="0.44" /><Key frame="105" value="0.73" /><Key frame="117" value="0.65" /><Key frame="129" value="0.52" /><Key frame="138" value="0.844074" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="29" value="-29.3582" /><Key frame="117" value="-33.3" /><Key frame="129" value="5.7" /><Key frame="138" value="25.2371" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="29" value="18.8064" /><Key frame="117" value="19.6" /><Key frame="138" value="13.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="17" value="-51.3" /><Key frame="29" value="-47.7276" /><Key frame="117" value="-49.4001" /><Key frame="138" value="1.10055" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="32.9" /><Key frame="27" value="21.8875" /><Key frame="115" value="11.6895" /><Key frame="127" value="21.5" /><Key frame="136" value="14.8333" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="15" value="84.7" /><Key frame="27" value="70.7504" /><Key frame="115" value="70.8398" /><Key frame="136" value="69.9984" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="15" value="0.54" /><Key frame="27" value="0.3504" /><Key frame="115" value="0.510545" /><Key frame="127" value="0.31" /><Key frame="136" value="0.412984" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="88.6852" /><Key frame="115" value="78.3984" /><Key frame="136" value="82.2228" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="27" value="-6.24271" /><Key frame="115" value="-4.92188" /><Key frame="136" value="-6.87545" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="15" value="28.5" /><Key frame="27" value="1.75543" /><Key frame="115" value="5.35899" /><Key frame="136" value="-1.90004" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Text" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="565" y="66"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)

        self.logger.debug(json_data["story_start"].encode("utf8"))
        self.onStopped(json_data["story_start"].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="SemanticJudgeBox" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1803" y="400"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        import json
        data = json.loads(p[:-1])
        activity = data.get("activity")

        if activity.get("type")==1:
            self.onStoryStopped(p)

        elif activity.get("type")==3:
            self.onTTSStopped(p)
        else:
            import json
            error_json_message = json.dumps({"error_message":"input parmeter is not correct","result_code": -1010,"error_from":"semantic"})
            self.onUnknownStopped(error_json_message)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onTTSStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Output name="onStoryStopped" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onUnknownStopped" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Box name="SemanticTTS Speaker" id="8" localization="8" tooltip="Enter description here" x="2101" y="249"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="input" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" /><Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="GetTTSFromSemanticFormat" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="530" y="231"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.onStopped(p) #activate the output of the box
        import json
        data = json.loads(p[:-1])
        json_activity= data.get("activity")
        self.logger.debug(json_activity.get("tts").encode("utf8"))
        self.onStopped(json_activity.get("tts").encode("utf8"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="817" y="231"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Thinking" id="14" localization="8" tooltip="ID : #02B 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Thinking" x="819" y="389"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="140"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-6.5" /><Key frame="31" value="12.8913" /><Key frame="80" value="11.5" /><Key frame="119" value="13.8" /><Key frame="131" value="7.2" /><Key frame="140" value="-11.9668" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="31" value="8.87482" /><Key frame="119" value="9.00008" /><Key frame="140" value="-17.4791" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="15" value="-2.34809" /><Key frame="31" value="-12.3926" /><Key frame="105" value="-19.9512" /><Key frame="128" value="-2.48279" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="15" value="0" /><Key frame="31" value="-3.25195" /><Key frame="105" value="-2.02149" /><Key frame="128" value="-0.197286" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="15" value="-0.634643" /><Key frame="31" value="1.66993" /><Key frame="105" value="4.30664" /><Key frame="128" value="-0.742038" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="17" value="-45.8" /><Key frame="29" value="-85.0768" /><Key frame="117" value="-86.9" /><Key frame="129" value="-87.9" /><Key frame="138" value="-78.9185" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="17" value="-80.4" /><Key frame="29" value="-54.7589" /><Key frame="117" value="-52.1" /><Key frame="138" value="-88.7261" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="17" value="0.96" /><Key frame="29" value="0.7036" /><Key frame="43" value="0.44" /><Key frame="53" value="0.73" /><Key frame="68" value="0.44" /><Key frame="78" value="0.73" /><Key frame="95" value="0.44" /><Key frame="105" value="0.73" /><Key frame="117" value="0.65" /><Key frame="129" value="0.52" /><Key frame="138" value="0.844074" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="29" value="-29.3582" /><Key frame="117" value="-33.3" /><Key frame="129" value="5.7" /><Key frame="138" value="25.2371" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="29" value="18.8064" /><Key frame="117" value="19.6" /><Key frame="138" value="13.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="17" value="-51.3" /><Key frame="29" value="-47.7276" /><Key frame="117" value="-49.4001" /><Key frame="138" value="1.10055" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="32.9" /><Key frame="27" value="21.8875" /><Key frame="115" value="11.6895" /><Key frame="127" value="21.5" /><Key frame="136" value="14.8333" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="15" value="84.7" /><Key frame="27" value="70.7504" /><Key frame="115" value="70.8398" /><Key frame="136" value="69.9984" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="15" value="0.54" /><Key frame="27" value="0.3504" /><Key frame="115" value="0.510545" /><Key frame="127" value="0.31" /><Key frame="136" value="0.412984" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="88.6852" /><Key frame="115" value="78.3984" /><Key frame="136" value="82.2228" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="27" value="-6.24271" /><Key frame="115" value="-4.92188" /><Key frame="136" value="-6.87545" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="15" value="28.5" /><Key frame="27" value="1.75543" /><Key frame="115" value="5.35899" /><Key frame="136" value="-1.90004" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="showStringToHTML" id="25" localization="8" tooltip="" x="807" y="103"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="0" indexofinput="3" outputowner="5" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="25" indexofinput="2" outputowner="3" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="SemanticStoryPlayer" id="5" localization="8" tooltip="Enter description here" x="2493" y="614"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="input" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" /><Input name="onInputStopped" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" /><Input name="onPause" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onResume" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="118.921"><Box name="Story Motions" id="20" localization="8" tooltip="Enter description here" x="760" y="492"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Rand_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" /><Output name="onFinshed" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="118.921"><Box name="Happy" id="12" localization="8" tooltip="ID : #02A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Happy" x="1228" y="116"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-15" /><Key frame="23" value="-8.48092" /><Key frame="27" value="-12.3871" /><Key frame="31" value="-10.217" /><Key frame="36" value="-15" /><Key frame="40" value="-8.26391" /><Key frame="44" value="-12.1701" /><Key frame="48" value="-10" /><Key frame="54" value="-15" /><Key frame="58" value="-8.26391" /><Key frame="62" value="-12.1701" /><Key frame="66" value="-10" /><Key frame="71" value="-15" /><Key frame="75" value="-10.676" /><Key frame="87" value="-11.5137" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="15" value="-0.615236" /><Key frame="24" value="2" /><Key frame="40" value="-2" /><Key frame="58" value="2" /><Key frame="74" value="-2" /><Key frame="87" value="-0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-10.1" /><Key frame="84" value="-2.02149" /><Key frame="87" value="-1.84571" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="5" /><Key frame="36" value="-5" /><Key frame="54" value="5" /><Key frame="71" value="-5" /><Key frame="84" value="-0.0878909" /><Key frame="87" value="0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="3.5" /><Key frame="84" value="-0.175782" /><Key frame="87" value="0.351564" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-53" /><Key frame="28" value="-38.4" /><Key frame="36" value="-61.1" /><Key frame="45" value="-38.4" /><Key frame="54" value="-53" /><Key frame="63" value="-38.4" /><Key frame="71" value="-61.1" /><Key frame="79" value="-38.4" /><Key frame="87" value="-29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-63.5" /><Key frame="36" value="-100.538" /><Key frame="54" value="-63.5" /><Key frame="71" value="-100.538" /><Key frame="87" value="-70.4883" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" alwaysVisible="1" unit="1"><Key frame="20" value="0.020089" /><Key frame="28" value="0.34" /><Key frame="36" value="0.173538" /><Key frame="45" value="0.34" /><Key frame="54" value="0.020089" /><Key frame="63" value="0.34" /><Key frame="71" value="0.173538" /><Key frame="79" value="0.34" /><Key frame="87" value="0.582601" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="75.4" /><Key frame="36" value="101.5" /><Key frame="54" value="75.4" /><Key frame="71" value="101.5" /><Key frame="87" value="89.3848" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="14.8" /><Key frame="36" value="14.4" /><Key frame="54" value="14.8" /><Key frame="71" value="14.4" /><Key frame="87" value="8.17382" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-6.39955" /><Key frame="36" value="0.723418" /><Key frame="54" value="-6.39955" /><Key frame="71" value="0.723418" /><Key frame="87" value="0.876518" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="61.1" /><Key frame="28" value="39.8" /><Key frame="36" value="53" /><Key frame="45" value="39.8" /><Key frame="54" value="61.1" /><Key frame="63" value="39.8" /><Key frame="71" value="53" /><Key frame="79" value="39.8" /><Key frame="87" value="29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="100.538" /><Key frame="36" value="63.5" /><Key frame="54" value="100.538" /><Key frame="71" value="63.5" /><Key frame="87" value="70.1367" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" alwaysVisible="1" unit="1"><Key frame="20" value="0.173538" /><Key frame="28" value="0.29" /><Key frame="36" value="0.020089" /><Key frame="45" value="0.29" /><Key frame="54" value="0.173538" /><Key frame="63" value="0.29" /><Key frame="71" value="0.020089" /><Key frame="79" value="0.29" /><Key frame="87" value="0.585237" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="101.5" /><Key frame="36" value="75.4" /><Key frame="54" value="101.5" /><Key frame="71" value="75.4" /><Key frame="87" value="89.1211" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-14.4" /><Key frame="36" value="-14.8" /><Key frame="54" value="-14.4" /><Key frame="71" value="-14.8" /><Key frame="87" value="-8.34961" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-0.723418" /><Key frame="36" value="6.39955" /><Key frame="54" value="-0.723418" /><Key frame="71" value="6.39955" /><Key frame="87" value="0.788627" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Rand" id="2" localization="8" tooltip="" x="753" y="279"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        n = random.randint(0, 9)
        self.onStopped(n)
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onFinished()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onFinished" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Box name="Switch Case" id="3" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="905" y="162"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		elif(p == self.typeConversion(3)):
			self.output_4(p)
		elif(p == self.typeConversion(4)):
			self.output_5(p)
		elif(p == self.typeConversion(5)):
			self.output_6(p)
		elif(p == self.typeConversion(6)):
			self.output_7(p)
		elif(p == self.typeConversion(7)):
			self.output_8(p)
		elif(p == self.typeConversion(8)):
			self.output_9(p)
		elif(p == self.typeConversion(9)):
			self.output_10(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>0</keyword><keyword>1</keyword><keyword>2</keyword><keyword>3</keyword><keyword>4</keyword><keyword>5</keyword><keyword>6</keyword><keyword>7</keyword><keyword>8</keyword><keyword>9</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /><Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" /><Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" /><Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" /><Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" /><Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" /><Output name="output_9" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="12" /><Output name="output_10" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="13" /></Box><Box name="Kisses" id="4" localization="8" tooltip="ID : #02A 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Kisses" x="1229" y="222"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="127"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="26" value="-18.3718" /><Key frame="43" value="-21.0085" /><Key frame="56" value="-21.0085" /><Key frame="80" value="-17" /><Key frame="105" value="-22.9421" /><Key frame="127" value="-14.0651" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="26" value="-4.3091" /><Key frame="43" value="-1.84813" /><Key frame="56" value="-1.84813" /><Key frame="80" value="-1.84813" /><Key frame="105" value="-2.02391" /><Key frame="127" value="-2.11181" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="41" value="-27.4001" /><Key frame="56" value="-27.4001" /><Key frame="76" value="-2.83052" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="41" value="0" /><Key frame="56" value="0" /><Key frame="76" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="41" value="10.2097" /><Key frame="56" value="10.2097" /><Key frame="76" value="-0.792584" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="24" value="-30.6718" /><Key frame="41" value="-89.2077" /><Key frame="54" value="-89.2077" /><Key frame="78" value="-44.9982" /><Key frame="103" value="-28.6503" /><Key frame="125" value="-21.619" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="24" value="-110.746" /><Key frame="41" value="-50.2765" /><Key frame="54" value="-50.2765" /><Key frame="78" value="-101.517" /><Key frame="103" value="-109.691" /><Key frame="125" value="-65.4817" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="41" value="0.702933" /><Key frame="54" value="0.702933" /><Key frame="78" value="0.8" /><Key frame="103" value="0.676387" /><Key frame="125" value="0.109844" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="24" value="49.4806" /><Key frame="41" value="10.7204" /><Key frame="54" value="10.7204" /><Key frame="78" value="54.7541" /><Key frame="103" value="80.067" /><Key frame="125" value="84.8131" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="24" value="1.75543" /><Key frame="41" value="0.876513" /><Key frame="54" value="0.876513" /><Key frame="78" value="52.3811" /><Key frame="103" value="33.6601" /><Key frame="125" value="3.86483" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="41" value="-64.427" /><Key frame="54" value="-64.427" /><Key frame="78" value="-88" /><Key frame="103" value="-64.8665" /><Key frame="125" value="-8.00055" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="22" value="30.2372" /><Key frame="39" value="89.5017" /><Key frame="52" value="89.5017" /><Key frame="76" value="41.0478" /><Key frame="101" value="23.9968" /><Key frame="123" value="25.0515" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="22" value="119.496" /><Key frame="39" value="38.8457" /><Key frame="52" value="38.8457" /><Key frame="76" value="111.181" /><Key frame="101" value="119.442" /><Key frame="123" value="86.5709" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="39" value="0.758933" /><Key frame="52" value="0.758933" /><Key frame="76" value="0.909091" /><Key frame="101" value="0.730569" /><Key frame="123" value="0.22548" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="22" value="57.923" /><Key frame="39" value="1.76024" /><Key frame="52" value="1.76024" /><Key frame="76" value="63.3723" /><Key frame="101" value="80.0718" /><Key frame="123" value="88.0699" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="22" value="-9.84628" /><Key frame="39" value="-6.24272" /><Key frame="52" value="-6.24272" /><Key frame="76" value="-48.6944" /><Key frame="101" value="-37.2685" /><Key frame="123" value="-2.46337" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="39" value="56.9514" /><Key frame="52" value="56.9514" /><Key frame="76" value="80" /><Key frame="101" value="56.8635" /><Key frame="123" value="0.173379" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="BothArmsBumpInFront_01" id="5" localization="8" tooltip="ID : #01A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Here&#x0A;- There&#x0A;- Now&#x0A;- Present&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="1234" y="454"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="48"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-3.4747" /><Key frame="22" value="1.04209" /><Key frame="33" value="-13.7516" /><Key frame="46" value="-10.2424" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="1.84332" /><Key frame="22" value="1.84332" /><Key frame="33" value="1.84332" /><Key frame="46" value="1.84332" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="17" value="-18.8789" /><Key frame="27" value="-20.6927" /><Key frame="41" value="-3.91708" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="17" value="0.194351" /><Key frame="27" value="0.194351" /><Key frame="41" value="0.194351" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="17" value="6.69276" /><Key frame="27" value="7.2979" /><Key frame="41" value="-1.7619" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="14" value="-56.3" /><Key frame="26" value="-47.7" /><Key frame="32" value="-51.1523" /><Key frame="36" value="-56.2483" /><Key frame="48" value="-60.7308" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="14" value="-71" /><Key frame="26" value="-92.904" /><Key frame="32" value="-90.4395" /><Key frame="36" value="-86.8394" /><Key frame="48" value="-85.7847" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="14" value="0.856834" /><Key frame="26" value="0.8596" /><Key frame="32" value="0.796134" /><Key frame="36" value="0.6988" /><Key frame="48" value="0.5484" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="14" value="84.9505" /><Key frame="26" value="84.5494" /><Key frame="32" value="84.9023" /><Key frame="36" value="85.0768" /><Key frame="48" value="84.6373" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="14" value="13.6255" /><Key frame="26" value="14.1459" /><Key frame="32" value="13.2715" /><Key frame="36" value="12.3881" /><Key frame="48" value="12.6518" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="14" value="-40.6286" /><Key frame="26" value="-40.1689" /><Key frame="32" value="-40.8721" /><Key frame="36" value="-41.8389" /><Key frame="48" value="-41.4873" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="74.7" /><Key frame="24" value="53.9679" /><Key frame="30" value="56.8652" /><Key frame="34" value="58.8899" /><Key frame="46" value="64.2513" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="71.1899" /><Key frame="24" value="108.3" /><Key frame="30" value="91.4941" /><Key frame="34" value="84.2858" /><Key frame="46" value="83.7584" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="12" value="0.1084" /><Key frame="24" value="0.8564" /><Key frame="30" value="0.760105" /><Key frame="34" value="0.6984" /><Key frame="46" value="0.5428" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="12" value="74.2199" /><Key frame="24" value="86.6637" /><Key frame="30" value="87.1875" /><Key frame="34" value="87.0152" /><Key frame="46" value="86.8394" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="12" value="-17.7128" /><Key frame="24" value="-23.1632" /><Key frame="30" value="-21.7969" /><Key frame="34" value="-21.2821" /><Key frame="46" value="-16.9218" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="12" value="45.3497" /><Key frame="24" value="49.7443" /><Key frame="30" value="50.4474" /><Key frame="34" value="51.2385" /><Key frame="46" value="51.0627" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="ShowFarDistanceLeft_01" id="6" localization="8" tooltip="ID : #01A 0015&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- There&#x0A;- Future&#x0A;- Left&#x0A;- Far&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanRight&#x0A;End stance : LeanRight" x="1240" y="571"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="45"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="16.697" /><Key frame="32" value="-7.91266" /><Key frame="44" value="-5.10013" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="19.2459" /><Key frame="32" value="17.6638" /><Key frame="44" value="17.8396" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="19" value="-17.3846" /><Key frame="33" value="-3.89231" /><Key frame="44" value="-2.82189" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="19" value="-3.8822" /><Key frame="33" value="6.00665" /><Key frame="44" value="6.00665" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="19" value="8.95096" /><Key frame="33" value="-0.225453" /><Key frame="44" value="-0.798824" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="22" value="-88.5" /><Key frame="33" value="-24.1678" /><Key frame="45" value="-34.4511" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="22" value="-59.4172" /><Key frame="33" value="-102.484" /><Key frame="45" value="-96.5954" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="22" value="0.02" /><Key frame="33" value="0.84" /><Key frame="45" value="0.68" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="22" value="-10.2857" /><Key frame="33" value="20.6522" /><Key frame="45" value="18.7185" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="22" value="30.074" /><Key frame="33" value="45.1034" /><Key frame="45" value="42.994" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="22" value="-0.529749" /><Key frame="33" value="-32.0829" /><Key frame="45" value="-28.743" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="18" value="80.8679" /><Key frame="31" value="36.5581" /><Key frame="43" value="60.2134" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="73.0479" /><Key frame="31" value="85.0336" /><Key frame="43" value="110.092" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0" /><Key frame="31" value="0.84" /><Key frame="43" value="0.68" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="18" value="85.0816" /><Key frame="31" value="83.6753" /><Key frame="43" value="87.191" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-20.5383" /><Key frame="31" value="-14.298" /><Key frame="43" value="-16.0559" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="26.6288" /><Key frame="31" value="25.0467" /><Key frame="43" value="25.7499" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="CircleBothArmsLeaningFront_01" id="10" localization="8" tooltip="ID : #01F 0007&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Terrible&#x0A;- Damn!&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Flex&#x0A;End stance : Center" x="1240" y="680"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="52"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="14" value="-22.3208" /><Key frame="23" value="-9.62079" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.26" ordinateParam="0.60092" /><Tangent side="right" interpType="bezier" abscissaParam="4.73333" ordinateParam="-0.667689" /></Key><Key frame="33" value="-19.7208" /><Key frame="52" value="-19.438" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="14" value="0" /><Key frame="18" value="-7.25865" /><Key frame="23" value="5.17932" /><Key frame="28" value="-6.92171" /><Key frame="33" value="-0.667689" /><Key frame="52" value="-0.560471" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="14" value="-75.025" /><Key frame="23" value="-23.1" /><Key frame="33" value="-40.1792" /><Key frame="41" value="-88.5" /><Key frame="52" value="-55.7311" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="14" value="-80.2367" /><Key frame="33" value="-119.5" /><Key frame="52" value="-86.2848" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="33" value="0.98" /><Key frame="52" value="0.47" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="14" value="69.9" /><Key frame="52" value="93.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="33" value="40.5301" /><Key frame="52" value="10.0782" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="-73.5" /><Key frame="33" value="-93.1" /><Key frame="52" value="-93.0581" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="76.1479" /><Key frame="23" value="23.1" /><Key frame="33" value="55.9" /><Key frame="41" value="88.5" /><Key frame="52" value="55.7311" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="81.4703" /><Key frame="33" value="112.763" /><Key frame="52" value="78.6899" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="33" value="0.98" /><Key frame="52" value="0.47" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="69.9" /><Key frame="52" value="93.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="33" value="-46.164" /><Key frame="52" value="-9.65008" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="73.5" /><Key frame="33" value="93.1" /><Key frame="52" value="93.0586" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="28" value="-21.7661" /><Key frame="52" value="-5.89204" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="28" value="-0.321197" /><Key frame="52" value="-0.321197" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="28" value="11.8618" /><Key frame="52" value="1.32302" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="BothArmsShowGround_LeanBack_01" id="14" localization="8" tooltip='ID : #01F 0005&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- &quot;!&quot;&#x0A;- Great!&#x0A;- Impressive&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanBack&#x0A;End stance : LeanBack' x="1240" y="794"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="42"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="28" value="-3.45432" /><Key frame="40" value="-9.1739" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="13" value="3.97113" /><Key frame="20" value="-8.71897" /><Key frame="28" value="5.83536" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-2.97254" ordinateParam="-0.40132" /><Tangent side="right" interpType="bezier" abscissaParam="4.45882" ordinateParam="0.60198" /></Key><Key frame="40" value="-1.34149" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-26.0183" /><Key frame="25" value="-37.9716" /><Key frame="41" value="-46.1456" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="12" value="-77.5717" /><Key frame="25" value="-96.1169" /><Key frame="41" value="-97.6989" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="12" value="0.6772" /><Key frame="25" value="0.6796" /><Key frame="41" value="0.4336" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="12" value="95.0542" /><Key frame="26" value="79.8101" /><Key frame="42" value="80.3375" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="15.1656" /><Key frame="41" value="22.6659" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="12" value="-69.6078" /><Key frame="25" value="-78.9244" /><Key frame="41" value="-84.7252" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="17.4002" /><Key frame="27" value="30.1445" /><Key frame="42" value="38.3184" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="82.3569" /><Key frame="27" value="63.1087" /><Key frame="42" value="60.1203" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="14" value="0.6768" /><Key frame="27" value="0.6796" /><Key frame="42" value="0.4328" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="80.7061" /><Key frame="27" value="58.3529" /><Key frame="42" value="55.7162" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="27" value="-19.5883" /><Key frame="42" value="-24.4322" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="14" value="53.0011" /><Key frame="27" value="68.9095" /><Key frame="42" value="71.0189" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="13" value="-2.26358" /><Key frame="25" value="6.8356" /><Key frame="42" value="-0.932188" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="13" value="-0.915874" /><Key frame="25" value="-0.915874" /><Key frame="42" value="-0.321197" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="13" value="-0.137991" /><Key frame="25" value="-3.71621" /><Key frame="42" value="0.0685241" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="StrongNodGatherArmsInFront_01" id="15" localization="8" tooltip='ID : #01F 0028&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- &quot;!&quot;&#x0A;- Awesome&#x0A;- Awful&#x0A;- Impressive&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center' x="1240" y="906"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="47"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="12" value="-7.40575" /><Key frame="20" value="-19.1833" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.16164" ordinateParam="-0.598006" /><Tangent side="right" interpType="bezier" abscissaParam="3.16164" ordinateParam="0.598006" /></Key><Key frame="28" value="-2.83715" /><Key frame="35" value="-11.8883" /><Key frame="45" value="-15.6677" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="12" value="-1.76024" /><Key frame="20" value="-1.76024" /><Key frame="45" value="-1.76024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-43.3271" /><Key frame="21" value="-60.9" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.57584" ordinateParam="7.46073" /><Tangent side="right" interpType="bezier" abscissaParam="3.55899" ordinateParam="-5.80279" /></Key><Key frame="28" value="-41.8819" /><Key frame="34" value="-49.3379" /><Key frame="47" value="-69.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="12" value="-83.7091" /><Key frame="21" value="-70.9158" /><Key frame="28" value="-108.464" /><Key frame="34" value="-104.421" /><Key frame="47" value="-92.937" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="12" value="0.2924" /><Key frame="21" value="0.2924" /><Key frame="28" value="0.58" /><Key frame="34" value="0.2924" /><Key frame="47" value="0.2924" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="12" value="89.6472" /><Key frame="21" value="65.932" /><Key frame="28" value="91.8668" /><Key frame="34" value="95.3825" /><Key frame="47" value="80.8" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="12" value="3.46649" /><Key frame="21" value="8.05699" /><Key frame="28" value="12.7153" /><Key frame="34" value="13.77" /><Key frame="47" value="14.7368" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="12" value="9.40201" /><Key frame="21" value="24.7831" /><Key frame="28" value="-38.4111" /><Key frame="34" value="-9.31893" /><Key frame="47" value="7.64417" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="42.3084" /><Key frame="19" value="62.6993" /><Key frame="26" value="53.0051" /><Key frame="33" value="65.8329" /><Key frame="47" value="73.3037" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="92.2601" /><Key frame="19" value="94.3696" /><Key frame="26" value="100.61" /><Key frame="33" value="95.5577" /><Key frame="47" value="94.5909" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="12" value="0.2928" /><Key frame="19" value="0.2928" /><Key frame="26" value="0.58" /><Key frame="33" value="0.2928" /><Key frame="47" value="0.2928" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="12" value="110.081" /><Key frame="19" value="107.268" /><Key frame="26" value="115.266" /><Key frame="33" value="117.991" /><Key frame="47" value="120.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="12" value="-11.1642" /><Key frame="19" value="-12.0431" /><Key frame="26" value="-13.1857" /><Key frame="33" value="-13.2736" /><Key frame="47" value="-13.6252" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="12" value="-4.66066" /><Key frame="19" value="-14.3288" /><Key frame="26" value="14.8513" /><Key frame="33" value="-3.86964" /><Key frame="47" value="-18.4597" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="12" value="-3.04976" /><Key frame="23" value="-14.7151" /><Key frame="28" value="-15.4467" /><Key frame="39" value="-5.23557" /><Key frame="44" value="-3.02564" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="23" value="-3.40453" /><Key frame="28" value="-3.40453" /><Key frame="39" value="-3.40453" /><Key frame="44" value="-3.40453" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="12" value="-0.696228" /><Key frame="23" value="6.6462" /><Key frame="28" value="7.26635" /><Key frame="39" value="0.530095" /><Key frame="44" value="-1.10977" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="LittleBothArmsBump_DuckEnd_01" id="16" localization="8" tooltip='ID : #01C 0013&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Yes&#x0A;- Affirmative&#x0A;- &quot;.&quot;&#x0A;- Indicate&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Flex' x="1246" y="1016"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="37"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="7" value="-5.89675" /><Key frame="17" value="-17.8184" /><Key frame="36" value="-5.7624" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="7" value="5.12269" /><Key frame="17" value="5.53093" /><Key frame="36" value="5.47908" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="15" value="3.4714" /><Key frame="32" value="-5.13816" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="15" value="0.530859" /><Key frame="32" value="0.530859" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="15" value="-3.01414" /><Key frame="32" value="1.60563" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="9" value="-51.9416" /><Key frame="17" value="-49.9201" /><Key frame="26" value="-49.9201" /><Key frame="37" value="-49.7491" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="9" value="-59.0949" /><Key frame="17" value="-81.0844" /><Key frame="26" value="-57.8644" /><Key frame="37" value="-50.0373" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="9" value="0.74" /><Key frame="17" value="0.92" /><Key frame="26" value="0.1956" /><Key frame="37" value="0.2224" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="9" value="75.1862" /><Key frame="17" value="75.1862" /><Key frame="26" value="75.1862" /><Key frame="37" value="71.3237" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="9" value="3.98205" /><Key frame="17" value="10.1412" /><Key frame="26" value="7.6735" /><Key frame="37" value="6.09625" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="9" value="5.35899" /><Key frame="17" value="0.261268" /><Key frame="26" value="2.63435" /><Key frame="37" value="0.705531" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="8" value="56.8683" /><Key frame="16" value="55.4621" /><Key frame="25" value="56.8683" /><Key frame="35" value="60.9066" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="8" value="64.7739" /><Key frame="16" value="87.5592" /><Key frame="25" value="64.1586" /><Key frame="35" value="56.0774" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="8" value="0.74" /><Key frame="16" value="0.92" /><Key frame="25" value="0.1648" /><Key frame="35" value="0.1888" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="8" value="78.7066" /><Key frame="16" value="78.7066" /><Key frame="25" value="78.7066" /><Key frame="35" value="80.8112" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="8" value="-5.36383" /><Key frame="16" value="-11.9421" /><Key frame="25" value="-11.1647" /><Key frame="35" value="-12.8298" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="8" value="-11.692" /><Key frame="16" value="-11.692" /><Key frame="25" value="-11.692" /><Key frame="35" value="-13.3571" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="OfferBothHands_HeadNod_LeanLeft_01" id="17" localization="8" tooltip="ID : #01C 0021&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Affirmative&#x0A;- Indicate&#x0A;- Exactly&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanLeft" x="1246" y="1123"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="58"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="27" value="-13.6622" /><Key frame="34" value="-3.64635" /><Key frame="41" value="-11.7228" /><Key frame="55" value="-12.3438" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="13" value="-42.4" /><Key frame="33" value="-88.5" /><Key frame="45" value="-36.6" /><Key frame="58" value="-62.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="13" value="-108.67" /><Key frame="21" value="-108.3" /><Key frame="45" value="-71" /><Key frame="58" value="-33.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="13" value="0.339847" /><Key frame="21" value="0.4844" /><Key frame="33" value="0.69" /><Key frame="45" value="0.98" /><Key frame="58" value="0.04" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="13" value="69.2907" /><Key frame="21" value="58.1399" /><Key frame="33" value="52.4" /><Key frame="45" value="78.9" /><Key frame="58" value="64.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="13" value="20.4" /><Key frame="21" value="31.2482" /><Key frame="33" value="51" /><Key frame="45" value="37" /><Key frame="58" value="20.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="13" value="-58.8296" /><Key frame="33" value="-53.7" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5.57231" ordinateParam="-17.9647" /><Tangent side="right" interpType="bezier" abscissaParam="3.34338" ordinateParam="10.7788" /></Key><Key frame="45" value="-77.1713" /><Key frame="58" value="22.41" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="42.4" /><Key frame="32" value="88.5" /><Key frame="44" value="36.6" /><Key frame="57" value="62.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="108.67" /><Key frame="20" value="108.3" /><Key frame="44" value="71" /><Key frame="57" value="33.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="12" value="0.339847" /><Key frame="20" value="0.4812" /><Key frame="32" value="0.69" /><Key frame="44" value="0.98" /><Key frame="57" value="0.04" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="12" value="69.2907" /><Key frame="20" value="59.4631" /><Key frame="32" value="52.4" /><Key frame="44" value="78.9" /><Key frame="57" value="64.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="12" value="-20.4" /><Key frame="20" value="-39.9036" /><Key frame="32" value="-51" /><Key frame="44" value="-37" /><Key frame="57" value="-15.2201" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="12" value="58.8296" /><Key frame="32" value="53.7" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5.85834" ordinateParam="16.5987" /><Tangent side="right" interpType="bezier" abscissaParam="3.51499" ordinateParam="-9.95926" /></Key><Key frame="44" value="78.9244" /><Key frame="57" value="22.41" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-24.7639" /><Key frame="32" value="-7.78226" /><Key frame="53" value="-3.19309" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="32" value="4.66302" /><Key frame="53" value="4.66302" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="11.8853" /><Key frame="32" value="2.14051" /><Key frame="53" value="-0.894165" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Disco" id="18" localization="8" tooltip="ID : #04B 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Disco" x="1226" y="12"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="412"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="39" value="-27.3" /><Key frame="60" value="19.4" /><Key frame="84" value="-27.3" /><Key frame="105" value="19.4" /><Key frame="128" value="-27.3" /><Key frame="149" value="19.4" /><Key frame="173" value="-27.3" /><Key frame="194" value="19.4" /><Key frame="205" value="3.9" /><Key frame="222" value="-27.3" /><Key frame="243" value="19.4" /><Key frame="267" value="-27.3" /><Key frame="288" value="19.4" /><Key frame="311" value="-27.3" /><Key frame="332" value="19.4" /><Key frame="356" value="-27.3" /><Key frame="377" value="19.4" /><Key frame="407" value="-9.84628" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="39" value="-42.7" /><Key frame="60" value="2.3554" /><Key frame="84" value="-42.7" /><Key frame="105" value="2.3554" /><Key frame="128" value="-42.7" /><Key frame="149" value="1.06043" /><Key frame="173" value="-42.7" /><Key frame="194" value="16.6" /><Key frame="205" value="24.3899" /><Key frame="222" value="42.7" /><Key frame="243" value="-2.3554" /><Key frame="267" value="42.7" /><Key frame="288" value="-2.3554" /><Key frame="311" value="42.7" /><Key frame="332" value="-1.06043" /><Key frame="356" value="42.7" /><Key frame="377" value="-16.6" /><Key frame="407" value="0.524941" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="19" value="-21.5451" /><Key frame="39" value="-2.11731" /><Key frame="60" value="-19.7111" /><Key frame="84" value="-2.31524" /><Key frame="105" value="-19.4711" /><Key frame="128" value="-2.19563" /><Key frame="149" value="-19.5819" /><Key frame="173" value="-2.10479" /><Key frame="194" value="-19.9487" /><Key frame="222" value="-2.01022" /><Key frame="243" value="-19.5819" /><Key frame="267" value="-2.19306" /><Key frame="288" value="-19.4593" /><Key frame="311" value="-2.26915" /><Key frame="332" value="-19.5725" /><Key frame="356" value="-2.07819" /><Key frame="377" value="-19.6562" /><Key frame="407" value="-2.83774" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="39" value="0" /><Key frame="60" value="0" /><Key frame="84" value="0" /><Key frame="105" value="0" /><Key frame="128" value="0" /><Key frame="149" value="0" /><Key frame="173" value="0" /><Key frame="194" value="0" /><Key frame="222" value="0" /><Key frame="243" value="0" /><Key frame="267" value="0" /><Key frame="288" value="0" /><Key frame="311" value="0" /><Key frame="332" value="0" /><Key frame="356" value="0" /><Key frame="377" value="0" /><Key frame="407" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="19" value="9.5664" /><Key frame="39" value="-0.217285" /><Key frame="60" value="10.6541" /><Key frame="84" value="-0.741057" /><Key frame="105" value="10.3603" /><Key frame="128" value="-0.183873" /><Key frame="149" value="10.7163" /><Key frame="173" value="-0.533559" /><Key frame="194" value="10.4371" /><Key frame="222" value="-0.637434" /><Key frame="243" value="10.7163" /><Key frame="267" value="-0.391448" /><Key frame="288" value="10.5677" /><Key frame="311" value="-0.684319" /><Key frame="332" value="10.2675" /><Key frame="356" value="-0.658193" /><Key frame="377" value="10.7539" /><Key frame="407" value="-0.754414" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="18" value="-78.6607" /><Key frame="27" value="-64.7" /><Key frame="38" value="-21.1795" /><Key frame="59" value="-11.5993" /><Key frame="83" value="-21.1795" /><Key frame="104" value="-11.5993" /><Key frame="127" value="-21.1795" /><Key frame="148" value="-11.5993" /><Key frame="172" value="-21.1795" /><Key frame="193" value="-11.5993" /><Key frame="204" value="-47" /><Key frame="213" value="-13.3528" /><Key frame="221" value="-7.91266" /><Key frame="231" value="-75" /><Key frame="242" value="-14.7682" /><Key frame="254" value="-83.6" /><Key frame="266" value="-7.91266" /><Key frame="276" value="-75" /><Key frame="287" value="-14.7682" /><Key frame="299" value="-83.6" /><Key frame="310" value="-7.91266" /><Key frame="320" value="-75" /><Key frame="331" value="-14.7682" /><Key frame="343" value="-83.6" /><Key frame="355" value="-7.91266" /><Key frame="365" value="-75" /><Key frame="376" value="-14.7682" /><Key frame="391" value="-56.4" /><Key frame="406" value="-29.4496" /><Key frame="411" value="-24.3436" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="18" value="-37.5322" /><Key frame="38" value="-21.7996" /><Key frame="59" value="-35.4228" /><Key frame="83" value="-21.7996" /><Key frame="104" value="-35.4228" /><Key frame="127" value="-21.7996" /><Key frame="148" value="-35.4228" /><Key frame="172" value="-21.7996" /><Key frame="193" value="-35.4228" /><Key frame="204" value="23.5" /><Key frame="213" value="46.8836" /><Key frame="221" value="48.7823" /><Key frame="231" value="4.3" /><Key frame="242" value="0.090296" /><Key frame="254" value="26.4" /><Key frame="266" value="48.7823" /><Key frame="276" value="4.3" /><Key frame="287" value="0.090296" /><Key frame="299" value="26.4" /><Key frame="310" value="48.7823" /><Key frame="320" value="4.3" /><Key frame="331" value="0.090296" /><Key frame="343" value="26.4" /><Key frame="355" value="48.7823" /><Key frame="365" value="4.3" /><Key frame="376" value="0.090296" /><Key frame="391" value="-77.1" /><Key frame="406" value="-70.1779" /><Key frame="411" value="-69.349" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="18" value="0.2" /><Key frame="27" value="0.6" /><Key frame="38" value="0.2648" /><Key frame="59" value="0.264" /><Key frame="83" value="0.2648" /><Key frame="104" value="0.264" /><Key frame="127" value="0.2648" /><Key frame="148" value="0.264" /><Key frame="172" value="0.2648" /><Key frame="193" value="0.264" /><Key frame="213" value="0.663802" /><Key frame="221" value="0.928" /><Key frame="231" value="0.3" /><Key frame="242" value="0.0283999" /><Key frame="254" value="0.75" /><Key frame="266" value="0.928" /><Key frame="276" value="0.3" /><Key frame="287" value="0.0283999" /><Key frame="299" value="0.75" /><Key frame="310" value="0.928" /><Key frame="320" value="0.3" /><Key frame="331" value="0.0283999" /><Key frame="343" value="0.75" /><Key frame="355" value="0.928" /><Key frame="365" value="0.3" /><Key frame="376" value="0.5284" /><Key frame="391" value="0.936396" /><Key frame="406" value="0.950347" /><Key frame="411" value="0.2968" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="18" value="56.0261" /><Key frame="38" value="74.2401" /><Key frame="59" value="80.481" /><Key frame="83" value="74.2401" /><Key frame="104" value="80.481" /><Key frame="127" value="74.2401" /><Key frame="148" value="80.481" /><Key frame="172" value="74.2401" /><Key frame="193" value="80.481" /><Key frame="204" value="9.9" /><Key frame="213" value="-60.1055" /><Key frame="221" value="-68.2895" /><Key frame="242" value="57.0441" /><Key frame="266" value="-68.2895" /><Key frame="287" value="57.0441" /><Key frame="310" value="-68.2895" /><Key frame="331" value="57.0441" /><Key frame="355" value="-68.2895" /><Key frame="376" value="57.0441" /><Key frame="411" value="84.2858" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="18" value="28.6506" /><Key frame="38" value="23.0255" /><Key frame="59" value="20.3887" /><Key frame="83" value="23.0255" /><Key frame="104" value="20.3887" /><Key frame="127" value="23.0255" /><Key frame="148" value="20.3887" /><Key frame="172" value="23.0255" /><Key frame="193" value="20.3887" /><Key frame="213" value="50.79" /><Key frame="221" value="55.3753" /><Key frame="231" value="70.6641" /><Key frame="242" value="18.5641" /><Key frame="254" value="70.6641" /><Key frame="266" value="55.3753" /><Key frame="276" value="70.6641" /><Key frame="287" value="18.5641" /><Key frame="299" value="70.6641" /><Key frame="310" value="55.3753" /><Key frame="320" value="70.6641" /><Key frame="331" value="18.5641" /><Key frame="343" value="70.6641" /><Key frame="355" value="55.3753" /><Key frame="365" value="70.6641" /><Key frame="376" value="18.5641" /><Key frame="391" value="23.3482" /><Key frame="406" value="8.42198" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="18" value="6.85315" /><Key frame="27" value="-16.6" /><Key frame="38" value="-22.6785" /><Key frame="59" value="-24.0847" /><Key frame="83" value="-22.6785" /><Key frame="104" value="-24.0847" /><Key frame="127" value="-22.6785" /><Key frame="148" value="-24.0847" /><Key frame="172" value="-22.6785" /><Key frame="193" value="-24.0847" /><Key frame="213" value="-7.04428" /><Key frame="221" value="-6.15002" /><Key frame="242" value="-22.9373" /><Key frame="266" value="-6.15002" /><Key frame="287" value="-22.9373" /><Key frame="310" value="-6.15002" /><Key frame="331" value="-22.9373" /><Key frame="355" value="-6.15002" /><Key frame="376" value="-22.9373" /><Key frame="406" value="0.0212173" /><Key frame="411" value="4.74374" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="19" value="77.1713" /><Key frame="28" value="64.2" /><Key frame="39" value="7.91266" /><Key frame="49" value="75" /><Key frame="60" value="14.7682" /><Key frame="72" value="83.6" /><Key frame="84" value="7.91266" /><Key frame="94" value="75" /><Key frame="105" value="14.7682" /><Key frame="117" value="83.6" /><Key frame="128" value="7.91266" /><Key frame="138" value="75" /><Key frame="149" value="14.7682" /><Key frame="161" value="83.6" /><Key frame="173" value="7.91266" /><Key frame="183" value="75" /><Key frame="194" value="14.7682" /><Key frame="214" value="21.3189" /><Key frame="222" value="21.1795" /><Key frame="243" value="11.5993" /><Key frame="267" value="21.1795" /><Key frame="288" value="11.5993" /><Key frame="311" value="21.1795" /><Key frame="332" value="11.5993" /><Key frame="356" value="21.1795" /><Key frame="377" value="11.5993" /><Key frame="392" value="47.1" /><Key frame="407" value="29.769" /><Key frame="412" value="24.6121" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="19" value="34.0996" /><Key frame="28" value="32.5" /><Key frame="39" value="-48.7823" /><Key frame="49" value="-4.3" /><Key frame="60" value="-0.090296" /><Key frame="72" value="-26.4" /><Key frame="84" value="-48.7823" /><Key frame="94" value="-4.3" /><Key frame="105" value="-0.090296" /><Key frame="117" value="-26.4" /><Key frame="128" value="-48.7823" /><Key frame="138" value="-4.3" /><Key frame="149" value="-0.090296" /><Key frame="161" value="-26.4" /><Key frame="173" value="-48.7823" /><Key frame="183" value="-4.3" /><Key frame="194" value="-0.090296" /><Key frame="214" value="20.1841" /><Key frame="222" value="21.7996" /><Key frame="243" value="35.4228" /><Key frame="267" value="21.7996" /><Key frame="288" value="35.4228" /><Key frame="311" value="21.7996" /><Key frame="332" value="35.4228" /><Key frame="356" value="21.7996" /><Key frame="377" value="35.4228" /><Key frame="392" value="72.6" /><Key frame="407" value="70.5493" /><Key frame="412" value="69.3442" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="19" value="0.2" /><Key frame="28" value="0.95" /><Key frame="39" value="0.928" /><Key frame="49" value="0.3" /><Key frame="60" value="0.0283999" /><Key frame="72" value="0.75" /><Key frame="84" value="0.928" /><Key frame="94" value="0.3" /><Key frame="105" value="0.0283999" /><Key frame="117" value="0.75" /><Key frame="128" value="0.928" /><Key frame="138" value="0.3" /><Key frame="149" value="0.0283999" /><Key frame="161" value="0.75" /><Key frame="173" value="0.928" /><Key frame="183" value="0.3" /><Key frame="194" value="0.5284" /><Key frame="214" value="0.271478" /><Key frame="222" value="0.2648" /><Key frame="243" value="0.264" /><Key frame="267" value="0.2648" /><Key frame="288" value="0.264" /><Key frame="311" value="0.2648" /><Key frame="332" value="0.264" /><Key frame="356" value="0.2648" /><Key frame="377" value="0.264" /><Key frame="407" value="0.596785" /><Key frame="412" value="0.2976" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="19" value="52.4738" /><Key frame="39" value="-68.2895" /><Key frame="60" value="57.0441" /><Key frame="84" value="-68.2895" /><Key frame="105" value="57.0441" /><Key frame="128" value="-68.2895" /><Key frame="149" value="57.0441" /><Key frame="173" value="-68.2895" /><Key frame="194" value="57.0441" /><Key frame="214" value="73.396" /><Key frame="222" value="74.2401" /><Key frame="243" value="80.481" /><Key frame="267" value="74.2401" /><Key frame="288" value="80.481" /><Key frame="311" value="74.2401" /><Key frame="332" value="80.481" /><Key frame="356" value="74.2401" /><Key frame="377" value="80.481" /><Key frame="407" value="84.3785" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="19" value="-51.8597" /><Key frame="28" value="-74.9641" /><Key frame="39" value="-55.3753" /><Key frame="49" value="-70.6641" /><Key frame="60" value="-18.5641" /><Key frame="72" value="-70.6641" /><Key frame="84" value="-55.3753" /><Key frame="94" value="-70.6641" /><Key frame="105" value="-18.5641" /><Key frame="117" value="-70.6641" /><Key frame="128" value="-55.3753" /><Key frame="138" value="-70.6641" /><Key frame="149" value="-18.5641" /><Key frame="161" value="-70.6641" /><Key frame="173" value="-55.3753" /><Key frame="183" value="-70.6641" /><Key frame="194" value="-18.5641" /><Key frame="214" value="-22.7677" /><Key frame="222" value="-23.0255" /><Key frame="243" value="-20.3887" /><Key frame="267" value="-23.0255" /><Key frame="288" value="-20.3887" /><Key frame="311" value="-23.0255" /><Key frame="332" value="-20.3887" /><Key frame="356" value="-23.0255" /><Key frame="377" value="-20.3887" /><Key frame="392" value="-17.8" /><Key frame="412" value="-10" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="19" value="-23.03" /><Key frame="39" value="6.15002" /><Key frame="60" value="22.9373" /><Key frame="84" value="6.15002" /><Key frame="105" value="22.9373" /><Key frame="128" value="6.15002" /><Key frame="149" value="22.9373" /><Key frame="173" value="6.15002" /><Key frame="194" value="22.9373" /><Key frame="214" value="22.4535" /><Key frame="222" value="22.6785" /><Key frame="243" value="24.0847" /><Key frame="267" value="22.6785" /><Key frame="288" value="24.0847" /><Key frame="311" value="22.6785" /><Key frame="332" value="24.0847" /><Key frame="356" value="22.6785" /><Key frame="377" value="24.0847" /><Key frame="407" value="0.287525" /><Key frame="412" value="6.2379" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Conn" id="19" localization="8" tooltip="" x="1455" y="640"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="BothArmsBumpInFront_01 (1)" id="1" localization="8" tooltip="ID : #01A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Here&#x0A;- There&#x0A;- Now&#x0A;- Present&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="1216" y="327"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="48"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-3.4747" /><Key frame="22" value="1.04209" /><Key frame="33" value="-13.7516" /><Key frame="46" value="-10.2424" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="1.84332" /><Key frame="22" value="1.84332" /><Key frame="33" value="1.84332" /><Key frame="46" value="1.84332" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="17" value="-18.8789" /><Key frame="27" value="-20.6927" /><Key frame="41" value="-3.91708" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="17" value="0.194351" /><Key frame="27" value="0.194351" /><Key frame="41" value="0.194351" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="17" value="6.69276" /><Key frame="27" value="7.2979" /><Key frame="41" value="-1.7619" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="14" value="-56.3" /><Key frame="26" value="-47.7" /><Key frame="32" value="-51.1523" /><Key frame="36" value="-56.2483" /><Key frame="48" value="-60.7308" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="14" value="-71" /><Key frame="26" value="-92.904" /><Key frame="32" value="-90.4395" /><Key frame="36" value="-86.8394" /><Key frame="48" value="-85.7847" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="14" value="0.856834" /><Key frame="26" value="0.8596" /><Key frame="32" value="0.796134" /><Key frame="36" value="0.6988" /><Key frame="48" value="0.5484" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="14" value="84.9505" /><Key frame="26" value="84.5494" /><Key frame="32" value="84.9023" /><Key frame="36" value="85.0768" /><Key frame="48" value="84.6373" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="14" value="13.6255" /><Key frame="26" value="14.1459" /><Key frame="32" value="13.2715" /><Key frame="36" value="12.3881" /><Key frame="48" value="12.6518" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="14" value="-40.6286" /><Key frame="26" value="-40.1689" /><Key frame="32" value="-40.8721" /><Key frame="36" value="-41.8389" /><Key frame="48" value="-41.4873" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="74.7" /><Key frame="24" value="53.9679" /><Key frame="30" value="56.8652" /><Key frame="34" value="58.8899" /><Key frame="46" value="64.2513" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="71.1899" /><Key frame="24" value="108.3" /><Key frame="30" value="91.4941" /><Key frame="34" value="84.2858" /><Key frame="46" value="83.7584" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="12" value="0.1084" /><Key frame="24" value="0.8564" /><Key frame="30" value="0.760105" /><Key frame="34" value="0.6984" /><Key frame="46" value="0.5428" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="12" value="74.2199" /><Key frame="24" value="86.6637" /><Key frame="30" value="87.1875" /><Key frame="34" value="87.0152" /><Key frame="46" value="86.8394" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="12" value="-17.7128" /><Key frame="24" value="-23.1632" /><Key frame="30" value="-21.7969" /><Key frame="34" value="-21.2821" /><Key frame="46" value="-16.9218" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="12" value="45.3497" /><Key frame="24" value="49.7443" /><Key frame="30" value="50.4474" /><Key frame="34" value="51.2385" /><Key frame="46" value="51.0627" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Link inputowner="12" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="7" /><Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="8" /><Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="9" /><Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="10" /><Link inputowner="15" indexofinput="2" outputowner="3" indexofoutput="11" /><Link inputowner="16" indexofinput="2" outputowner="3" indexofoutput="12" /><Link inputowner="17" indexofinput="2" outputowner="3" indexofoutput="13" /><Link inputowner="18" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="14" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="15" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="16" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="19" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="19" indexofinput="2" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Input String Box (1)" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="389" y="196"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
import requests

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def parse(self, data):
        name = data.get("activity").get("file")

        # Not Running now
        #name, aux = tuple(name.split("."))
        #url = str(data.get("activity").get("host")) + name
        #url = "http://35.197.87.217/12.ogg"
        #r = requests.get(url)
        #with open("/home/nao/audio/12.ogg", "wb") as f:
            #f.write(r.content)
        #return "12.ogg"

        name, aux = tuple(name.split("."))
        mapping = json.load(open("/home/nao/stories/story_list.txt"))
        for story in mapping.get("story_list"):

            if story.get("story_name").encode("utf-8") == name + ".ogg":
                self.logger.debug(str(name))
                story_now = "目前播放:"+name
                self.OutputStoryName(str(story_now))
                return str(story.get("story_id")) + ".ogg"

        return "1.ogg"
        #return mapping[name.encode("utf8") + ".ogg"]

    def onInput_onStart(self, p):
        info = self.logger.info
        #self.onStopped() #activate the output of the box
        #self.logger.info("Get Input String: " + p)
        data = json.loads(p[:-1])
        story = self.parse(data)
        info("filename:" + str(story))

        self.onStopped(str(story))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="OutputStoryName" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="850" y="192"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Input name="onPause" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onResume" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="6" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="7" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="8" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="9" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="10" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="11" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="441" y="62"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.logger.info("Playing File: " + str(p))
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            self.logger.debug("###end of play story")
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.logger.debug("###now to end of play story")
                self.onStopped() # activate output of the box
                self.bIsRunning = False
            else:
                self.onStopped()
                self.bIsRunning = False
                self.logger.debug("###wrong to end of play story")

    def onInput_onStop(self):
        self.onUnload()


    def onInput_onPause(self):
        self.player.pause(self.ids[0])



    def onInput_onResume(self):
        self.player.play(self.ids[0])]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Input name="onPause" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onResume" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="6" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="7" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="8" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="9" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="10" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="206" y="275"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onInput_onStart(self, p):
        self.logger.info("Get File: " + str(p))
        #self.onStopped(self.behaviorAbsolutePath() + "/audio/" + str(p))

        self.onStopped("/home/nao/stories/" + str(p))

        #+ self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="6" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="4" outputowner="0" indexofoutput="4" /><Link inputowner="2" indexofinput="5" outputowner="0" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio player" type="Lock" timeout="0" /></Box><Box name="showStringToHTML" id="3" localization="8" tooltip="" x="1012" y="389"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p))
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="20" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" /><Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="4" /><Link inputowner="1" indexofinput="5" outputowner="0" indexofoutput="5" /><Link inputowner="20" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="20" indexofinput="3" outputowner="0" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="5" /><Link inputowner="20" indexofinput="3" outputowner="1" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Switch Case" id="3" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="1114" y="5"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("我要聽故事")):
			self.output_1(p)
		elif(p == self.typeConversion("我要聊天")):
			self.output_2(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>&quot;我要聽故事&quot;</keyword><keyword>&quot;我要聊天&quot;</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /></Box><Box name="Record Sound for Google STT (1)" id="11" localization="8" tooltip='Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head microphones) in wav format.&#x0A;&#x0A;If &quot;Temporary storage&quot; isn&apos;t checked, the output sound file is located in &quot;~/recordings/microphones/&lt;File name&gt;&quot;.&#x0A;Else, it is located in a temporary directory&#x0A;&#x0A;The onStopped output is stimulated at the end of the recording and contains the absolute path to the output sound file&#x0A;&#x0A;V1.1.0&#x0A;' x="633" y="1300"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="3" value="recording" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" /><Parameter name="Microphones used" inherits_from_parent="0" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="6"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter><Parameter name="Temporary storage" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is disabled the file is stored in ~/recordings/microphones. You can&#x0A;then get it on your computer using the menu Connection/File transfer.&#x0A;&#x0A;When this option is enabled the file is stored in the temporary folder of the behavior." id="7" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="5" min="0.1" max="60" tooltip="Duration of the recording in seconds." id="8" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Rec. Sound File" id="4" localization="8" tooltip="Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head&#x0A;microphones) in wav format." x="562" y="100"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            #self.ad = ALProxy("ALAudioDevice")
            self.audioRecorder = ALProxy("ALAudioRecorder")
        except Exception as e:
            #self.ad = None
            self.audioRecorder = None
            self.logger.error(e)
        self.filepath = ""

    def onLoad(self):
        self.bIsRecording = False
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False
        if( self.bIsRecording ):
            #self.ad.stopMicrophonesRecording()
            self.audioRecorder.stopMicrophonesRecording()
            self.bIsRecording = False

    def onInput_onStart(self, p):
        if(self.bIsRunning):
            return
        self.bIsRunning = True
        sExtension = self.toExtension( self.getParameter("Microphones used") )
        self.filepath = p + sExtension
        #if self.ad:
        if self.audioRecorder:
            channels = [0, 0, 1, 0]
            self.audioRecorder.startMicrophonesRecording(self.filepath, "wav", 16000, channels)
            #self.ad.startMicrophonesRecording( self.filepath )
            self.bIsRecording = True
        else:
            self.logger.warning("No sound recorded")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped(self.filepath)

    def toExtension(self, sMicrophones):
        if( sMicrophones == "Front head microphone only (.ogg)" ):
            return ".ogg"
        else:
            return ".wav"]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound. The data received on this input must be the&#x0A;filename of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="Microphones used" inherits_from_parent="1" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="5"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter></Box><Box name="Wait" id="13" localization="8" tooltip="Wait a moment before sending a bang on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start over." x="420" y="161"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="1" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /></Box><Box name="Get File Name" id="10" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="234" y="95"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[import os
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        if( self.getParameter("Temporary storage") ):
            import tempfile
            path = tempfile.mkdtemp() + "/"
        else:
            path = os.path.expanduser('~') + "/recordings/microphones/"
        self.onStopped( path + self.getParameter("File name") )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="3" value="recording" default_value="" custom_choice="0" tooltip="Name of the file." id="4" /><Parameter name="Temporary storage" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is enabled the file is stored in ~/.cache/currentChoregrapheBehavior&#x0A;or in ~/.cache/&lt;project_name&gt; when you play the behavior from the&#x0A;behavior manager.&#x0A;&#x0A;When it is disabled the file is stored in ~/recordedSounds. You can&#x0A;then get it on your computer using the menu Connection/File transfer." id="5" /></Box><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="4" indexofinput="3" outputowner="13" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="2" outputowner="10" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio recorder" type="Lock" timeout="0" /></Box><Box name="HTTP Google Cloud STT" id="13" localization="8" tooltip="" x="837" y="1295"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import os
import json
import requests
import urllib
import base64


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):

        filepath = p
        self.logger.debug("record audio path:"+filepath)
        try:

            self.logger.debug("start up for google api!")

            str_url = "https://content-speech.googleapis.com/v1/speech:recognize?alt=json&key="+self.getParameter("GOOGLE_API_KEY")

            audio_data = open(filepath, "rb").read()

            dic_config = {"sampleRateHertz": 16000,"languageCode": "zh-TW","enableWordTimeOffsets": False}
            dic_audio = {"content":base64.b64encode(audio_data)}
            dic_request_body = {"config": dic_config,"audio": dic_audio}

            raw_http_response_data = requests.post(
                str_url,
                headers="",
                data=json.dumps(dic_request_body),
                timeout=self.getParameter("Timeout")
            )

            dic_response_data = json.loads(raw_http_response_data.text)


            self.logger.debug("get return google data: "+str(dic_response_data))


            if "results" not in dic_response_data:
                self.logger.debug("google data error!!")
                error_json = json.dumps({"result_code":-1010,"error_from":"google stt","error_message":"can not get any text from voice"})
                self.onFailed(error_json)
            else:
                str_stt_text = dic_response_data["results"][0]["alternatives"][0]["transcript"]
                self.onStopped(str_stt_text.encode("utf-8"))

        except requests.exceptions.RequestException, message:
            self.logger.error(str(message))
            error_json = json.dumps({"result_code":-1013,"error_from":"google stt","error_message":str(message)})
            self.onFailed(error_json)

        except ValueError ,message:
            self.logger.error(str(message))
            error_json = json.dumps({"result_code":-1013,"error_from":"google stt","error_message":str(message)})
            self.onFailed(error_json)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onFailed" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Timeout" inherits_from_parent="0" content_type="1" value="5" default_value="10" min="1" max="3600" tooltip="" id="6" /><Parameter name="GOOGLE_API_KEY" inherits_from_parent="0" content_type="3" value="AIzaSyD3Q7EjbRIKyiti797ncj7gr4rOtnOaIYA" default_value="YOUR_API_KEY" custom_choice="0" tooltip="" id="7" /></Box><Box name="SayWelcomeKnowledge" id="14" localization="8" tooltip="Enter description here" x="350" y="1291"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Text Edit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="SayText_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="842" y="20"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Thinking" id="14" localization="8" tooltip="ID : #02B 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Thinking" x="616" y="217"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="140"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-6.5" /><Key frame="31" value="12.8913" /><Key frame="80" value="11.5" /><Key frame="119" value="13.8" /><Key frame="131" value="7.2" /><Key frame="140" value="-11.9668" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="31" value="8.87482" /><Key frame="119" value="9.00008" /><Key frame="140" value="-17.4791" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="15" value="-2.34809" /><Key frame="31" value="-12.3926" /><Key frame="105" value="-19.9512" /><Key frame="128" value="-2.48279" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="15" value="0" /><Key frame="31" value="-3.25195" /><Key frame="105" value="-2.02149" /><Key frame="128" value="-0.197286" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="15" value="-0.634643" /><Key frame="31" value="1.66993" /><Key frame="105" value="4.30664" /><Key frame="128" value="-0.742038" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="17" value="-45.8" /><Key frame="29" value="-85.0768" /><Key frame="117" value="-86.9" /><Key frame="129" value="-87.9" /><Key frame="138" value="-78.9185" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="17" value="-80.4" /><Key frame="29" value="-54.7589" /><Key frame="117" value="-52.1" /><Key frame="138" value="-88.7261" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="17" value="0.96" /><Key frame="29" value="0.7036" /><Key frame="43" value="0.44" /><Key frame="53" value="0.73" /><Key frame="68" value="0.44" /><Key frame="78" value="0.73" /><Key frame="95" value="0.44" /><Key frame="105" value="0.73" /><Key frame="117" value="0.65" /><Key frame="129" value="0.52" /><Key frame="138" value="0.844074" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="29" value="-29.3582" /><Key frame="117" value="-33.3" /><Key frame="129" value="5.7" /><Key frame="138" value="25.2371" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="29" value="18.8064" /><Key frame="117" value="19.6" /><Key frame="138" value="13.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="17" value="-51.3" /><Key frame="29" value="-47.7276" /><Key frame="117" value="-49.4001" /><Key frame="138" value="1.10055" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="32.9" /><Key frame="27" value="21.8875" /><Key frame="115" value="11.6895" /><Key frame="127" value="21.5" /><Key frame="136" value="14.8333" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="15" value="84.7" /><Key frame="27" value="70.7504" /><Key frame="115" value="70.8398" /><Key frame="136" value="69.9984" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="15" value="0.54" /><Key frame="27" value="0.3504" /><Key frame="115" value="0.510545" /><Key frame="127" value="0.31" /><Key frame="136" value="0.412984" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="88.6852" /><Key frame="115" value="78.3984" /><Key frame="136" value="82.2228" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="27" value="-6.24271" /><Key frame="115" value="-4.92188" /><Key frame="136" value="-6.87545" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="15" value="28.5" /><Key frame="27" value="1.75543" /><Key frame="115" value="5.35899" /><Key frame="136" value="-1.90004" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Text" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="504" y="43"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)


        self.logger.debug(json_data["chat_start"].encode("utf8"))
        self.onStopped(json_data["chat_start"].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="HTTPAPMIC Recognition" id="15" localization="8" tooltip="" x="1030" y="1352"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import os
import json
import requests
import urllib
import base64


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.session = requests.Session()
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):

        unrecongnize_text = p
        self.logger.debug("unrecongnize_text:"+unrecongnize_text)
        try:

            self.logger.debug("start up for APMIC api!")

            str_url = "https://jerry.ap-mic.com/apidisplay/JG5DD6F/"

            #str_url = "http://35.234.6.84:9487/test"


            #this is very important!!!!
            dic_request_body = {"email":self.getParameter("Email") ,"token":self.getParameter("Token"),"tag":unrecongnize_text }

            #self.logger.debug(json.dumps(json.loads((dic_request_body))))

            raw_http_response_data = self.session.post(
                str_url,
                data=json.dumps(dic_request_body))





            if raw_http_response_data.status_code != requests.codes.ok:
                self.logger.error("apmic error code"+ str(raw_http_response_data.status_code))
                self.logger.error("apmic http internet error!!")
                error_json = json.dumps({"result_code":-1013,"error_from":"apmic api","error_message":"internet some fatal error"})
                self.onFailed(error_json)
                return;


            json_response_data = json.loads(raw_http_response_data.text)


            self.logger.debug("get return APMIC data: "+str(json_response_data))


            if json_response_data["status"] == "succeed":


                self.onStopped(json_response_data["reply"]["reply"].encode("utf-8"))
                return;

            else:
                self.logger.error("apmic error token or token expired!!")
                error_json = json.dumps({"result_code":-1013,"error_from":"apmic api","error_message":"error token or token expired"})
                self.onFailed(error_json)
                return;






        except requests.exceptions.RequestException, message:
            self.logger.error(str(message))
            error_json = json.dumps({"result_code":-1013,"error_from":"google stt","error_message":str(message)})
            self.onFailed(error_json)

        except ValueError ,message:
            self.logger.error(str(message))
            error_json = json.dumps({"result_code":-1013,"error_from":"google stt","error_message":str(message)})
            self.onFailed(error_json)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onFailed" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Timeout" inherits_from_parent="0" content_type="1" value="5" default_value="10" min="1" max="3600" tooltip="" id="6" /><Parameter name="Token" inherits_from_parent="0" content_type="3" value="d1bcb1e210ce7ac741981b7978de5d0f44ffb854" default_value="" custom_choice="0" tooltip="" id="7" /><Parameter name="Email" inherits_from_parent="0" content_type="3" value="jasontsai@iii.org.tw" default_value="" custom_choice="0" tooltip="" id="8" /></Box><Box name="Wait For API Callback " id="21" localization="8" tooltip="Enter description here" x="857" y="1477"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Text Edit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="118.921"><Box name="Say Text (1)" id="16" localization="8" tooltip="Say the text received on its input." x="494" y="487"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="19" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="165" y="498"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("我想想")]]></content></script><pluginContent><text><![CDATA[我想想]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Chill" id="18" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="452" y="637"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="showStringToHTML" id="26" localization="8" tooltip="" x="425" y="353"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="16" indexofinput="2" outputowner="19" indexofoutput="3" /><Link inputowner="18" indexofinput="2" outputowner="19" indexofoutput="3" /><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="26" indexofinput="2" outputowner="19" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Say AI Text" id="16" localization="8" tooltip="Enter description here" x="1201" y="1596"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Say Text_onStart" type="3" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="SayText_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Say Text" id="17" localization="8" tooltip="Say the text received on its input." x="483" y="779"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Chill" id="18" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="744" y="939"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Happy" id="12" localization="8" tooltip="ID : #02A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Happy" x="506" y="959"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-15" /><Key frame="23" value="-8.48092" /><Key frame="27" value="-12.3871" /><Key frame="31" value="-10.217" /><Key frame="36" value="-15" /><Key frame="40" value="-8.26391" /><Key frame="44" value="-12.1701" /><Key frame="48" value="-10" /><Key frame="54" value="-15" /><Key frame="58" value="-8.26391" /><Key frame="62" value="-12.1701" /><Key frame="66" value="-10" /><Key frame="71" value="-15" /><Key frame="75" value="-10.676" /><Key frame="87" value="-11.5137" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="15" value="-0.615236" /><Key frame="24" value="2" /><Key frame="40" value="-2" /><Key frame="58" value="2" /><Key frame="74" value="-2" /><Key frame="87" value="-0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-10.1" /><Key frame="84" value="-2.02149" /><Key frame="87" value="-1.84571" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="5" /><Key frame="36" value="-5" /><Key frame="54" value="5" /><Key frame="71" value="-5" /><Key frame="84" value="-0.0878909" /><Key frame="87" value="0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="3.5" /><Key frame="84" value="-0.175782" /><Key frame="87" value="0.351564" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-53" /><Key frame="28" value="-38.4" /><Key frame="36" value="-61.1" /><Key frame="45" value="-38.4" /><Key frame="54" value="-53" /><Key frame="63" value="-38.4" /><Key frame="71" value="-61.1" /><Key frame="79" value="-38.4" /><Key frame="87" value="-29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-63.5" /><Key frame="36" value="-100.538" /><Key frame="54" value="-63.5" /><Key frame="71" value="-100.538" /><Key frame="87" value="-70.4883" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" alwaysVisible="1" unit="1"><Key frame="20" value="0.020089" /><Key frame="28" value="0.34" /><Key frame="36" value="0.173538" /><Key frame="45" value="0.34" /><Key frame="54" value="0.020089" /><Key frame="63" value="0.34" /><Key frame="71" value="0.173538" /><Key frame="79" value="0.34" /><Key frame="87" value="0.582601" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="75.4" /><Key frame="36" value="101.5" /><Key frame="54" value="75.4" /><Key frame="71" value="101.5" /><Key frame="87" value="89.3848" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="14.8" /><Key frame="36" value="14.4" /><Key frame="54" value="14.8" /><Key frame="71" value="14.4" /><Key frame="87" value="8.17382" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-6.39955" /><Key frame="36" value="0.723418" /><Key frame="54" value="-6.39955" /><Key frame="71" value="0.723418" /><Key frame="87" value="0.876518" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="61.1" /><Key frame="28" value="39.8" /><Key frame="36" value="53" /><Key frame="45" value="39.8" /><Key frame="54" value="61.1" /><Key frame="63" value="39.8" /><Key frame="71" value="53" /><Key frame="79" value="39.8" /><Key frame="87" value="29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="100.538" /><Key frame="36" value="63.5" /><Key frame="54" value="100.538" /><Key frame="71" value="63.5" /><Key frame="87" value="70.1367" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" alwaysVisible="1" unit="1"><Key frame="20" value="0.173538" /><Key frame="28" value="0.29" /><Key frame="36" value="0.020089" /><Key frame="45" value="0.29" /><Key frame="54" value="0.173538" /><Key frame="63" value="0.29" /><Key frame="71" value="0.020089" /><Key frame="79" value="0.29" /><Key frame="87" value="0.585237" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="101.5" /><Key frame="36" value="75.4" /><Key frame="54" value="101.5" /><Key frame="71" value="75.4" /><Key frame="87" value="89.1211" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-14.4" /><Key frame="36" value="-14.8" /><Key frame="54" value="-14.4" /><Key frame="71" value="-14.8" /><Key frame="87" value="-8.34961" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-0.723418" /><Key frame="36" value="6.39955" /><Key frame="54" value="-0.723418" /><Key frame="71" value="6.39955" /><Key frame="87" value="0.788627" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="17" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="2" outputowner="12" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="find Person say hello" id="19" localization="8" tooltip="Enter description here" x="683" y="1104"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Text Edit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="input" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" /><Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="84.0896"><Box name="Say Text (1)" id="16" localization="8" tooltip="Say the text received on its input." x="1305" y="506"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Happy" id="12" localization="8" tooltip="ID : #02A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Happy" x="1316" y="770"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-15" /><Key frame="23" value="-8.48092" /><Key frame="27" value="-12.3871" /><Key frame="31" value="-10.217" /><Key frame="36" value="-15" /><Key frame="40" value="-8.26391" /><Key frame="44" value="-12.1701" /><Key frame="48" value="-10" /><Key frame="54" value="-15" /><Key frame="58" value="-8.26391" /><Key frame="62" value="-12.1701" /><Key frame="66" value="-10" /><Key frame="71" value="-15" /><Key frame="75" value="-10.676" /><Key frame="87" value="-11.5137" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="15" value="-0.615236" /><Key frame="24" value="2" /><Key frame="40" value="-2" /><Key frame="58" value="2" /><Key frame="74" value="-2" /><Key frame="87" value="-0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-10.1" /><Key frame="84" value="-2.02149" /><Key frame="87" value="-1.84571" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="5" /><Key frame="36" value="-5" /><Key frame="54" value="5" /><Key frame="71" value="-5" /><Key frame="84" value="-0.0878909" /><Key frame="87" value="0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="3.5" /><Key frame="84" value="-0.175782" /><Key frame="87" value="0.351564" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-53" /><Key frame="28" value="-38.4" /><Key frame="36" value="-61.1" /><Key frame="45" value="-38.4" /><Key frame="54" value="-53" /><Key frame="63" value="-38.4" /><Key frame="71" value="-61.1" /><Key frame="79" value="-38.4" /><Key frame="87" value="-29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-63.5" /><Key frame="36" value="-100.538" /><Key frame="54" value="-63.5" /><Key frame="71" value="-100.538" /><Key frame="87" value="-70.4883" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" alwaysVisible="1" unit="1"><Key frame="20" value="0.020089" /><Key frame="28" value="0.34" /><Key frame="36" value="0.173538" /><Key frame="45" value="0.34" /><Key frame="54" value="0.020089" /><Key frame="63" value="0.34" /><Key frame="71" value="0.173538" /><Key frame="79" value="0.34" /><Key frame="87" value="0.582601" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="75.4" /><Key frame="36" value="101.5" /><Key frame="54" value="75.4" /><Key frame="71" value="101.5" /><Key frame="87" value="89.3848" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="14.8" /><Key frame="36" value="14.4" /><Key frame="54" value="14.8" /><Key frame="71" value="14.4" /><Key frame="87" value="8.17382" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-6.39955" /><Key frame="36" value="0.723418" /><Key frame="54" value="-6.39955" /><Key frame="71" value="0.723418" /><Key frame="87" value="0.876518" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="61.1" /><Key frame="28" value="39.8" /><Key frame="36" value="53" /><Key frame="45" value="39.8" /><Key frame="54" value="61.1" /><Key frame="63" value="39.8" /><Key frame="71" value="53" /><Key frame="79" value="39.8" /><Key frame="87" value="29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="100.538" /><Key frame="36" value="63.5" /><Key frame="54" value="100.538" /><Key frame="71" value="63.5" /><Key frame="87" value="70.1367" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" alwaysVisible="1" unit="1"><Key frame="20" value="0.173538" /><Key frame="28" value="0.29" /><Key frame="36" value="0.020089" /><Key frame="45" value="0.29" /><Key frame="54" value="0.173538" /><Key frame="63" value="0.29" /><Key frame="71" value="0.020089" /><Key frame="79" value="0.29" /><Key frame="87" value="0.585237" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="101.5" /><Key frame="36" value="75.4" /><Key frame="54" value="101.5" /><Key frame="71" value="75.4" /><Key frame="87" value="89.1211" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-14.4" /><Key frame="36" value="-14.8" /><Key frame="54" value="-14.4" /><Key frame="71" value="-14.8" /><Key frame="87" value="-8.34961" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" alwaysVisible="1" unit="0"><Key frame="20" value="-0.723418" /><Key frame="36" value="6.39955" /><Key frame="54" value="-0.723418" /><Key frame="71" value="6.39955" /><Key frame="87" value="0.788627" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="locker" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="363" y="715"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.locked = False

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        self.locked = False
        pass

    def onInput_onStart(self):

        if self.locked ==True:
            self.logger.debug("lock = True")
            return
        else:
            self.onStopped() #activate the output of the box
            self.locked = True

    def onInput_onEventW(self):
        self.logger.debug("lock = false")
        self.locked = False]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onEventW" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="timer" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="188" y="786"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        time.sleep(8)
        self.logger.debug("try to modify locker = false")
        self.onEventW() #activate the output of the box
        self.logger.debug("ending try to modify locker = false")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onEventW" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Stand Up" id="3" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1463" y="769"><bitmap>media/images/box/movement/stand.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" /><Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" /><Timeline enable="0"><BehaviorLayer name="StandUpBehavior"><BehaviorKeyframe name="DetectRobotPose" index="1"><Diagram><Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6"><Choice value="Crouch" /><Choice value="LyingBack" /><Choice value="LyingBelly" /><Choice value="Sit" /><Choice value="SitRelax" /><Choice value="StandInit" /><Choice value="Stand" /><Choice value="StandZero" /></Parameter><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" /><Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="All motors" type="Lock" timeout="0" /></Box><Box name="Text" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="784" y="546"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
from random import randint
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)

        rand_num = randint(0, len(json_data["face_detection"])-1)
        self.logger.debug(json_data["face_detection"][rand_num].encode("utf8"))
        self.onStopped(json_data["face_detection"][rand_num].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="16" indexofoutput="4" /><Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="16" indexofinput="2" outputowner="8" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Face Tracker" id="18" localization="-1" tooltip="This box makes the robot track a face with different modes." x="481" y="1100"><bitmap>media/images/box/interaction/target_face.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )
        self.memory = ALProxy("ALMemory")
        self.targetName = "Face"
        self.distanceX = 0.0
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.0
        self.thresholdY = 0.0
        self.thresholdWz = 0.0
        self.subscribeDone = False
        self.effector = "None"
        self.isRunning = False
        self.isDebugging = False

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")
        self.BIND_PYTHON(self.getName(), "onTargetLost")
        self.BIND_PYTHON(self.getName(), "onTargetReached")
        self.BIND_PYTHON(self.getName(), "onTargetChanged")
        self.memory.subscribeToEvent("ALTracker/ActiveTargetChanged", self.getName(), "onTargetChanged")

    def onUnload(self):
        if self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False

        if self.isRunning:
            self.logger.debug("#### Face Tracker Stopped ###")
            self.tracker.setEffector("None")
            self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

    def onInput_onStart(self):

        if self.isDebugging == True:
            if self.isRunning == False:
                self.logger.debug("#### Face Tracker Start ###")
                self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
                self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
                self.subscribeDone = True

                mode = self.getParameter("Mode")
                width = self.getParameter("Width (m)")
                self.distanceX = self.getParameter("Distance X (m)")
                self.thresholdX = self.getParameter("Threshold X (m)")
                self.distanceY = self.getParameter("Distance Y (m)")
                self.thresholdY = self.getParameter("Threshold Y (m)")
                self.angleWz = self.getParameter("Theta (rad)")
                self.thresholdWz = self.getParameter("Threshold Theta (rad)")
                self.effector = self.getParameter("Effector")

                self.tracker.setEffector(self.effector)

                self.tracker.registerTarget(self.targetName, width)
                self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                                   self.thresholdX, self.thresholdY, self.thresholdWz])
                self.tracker.setMode(mode)

                self.tracker.track(self.targetName) #Start tracker
                self.isRunning = True

    def onInput_onStop(self):
        if self.isDebugging == True:
            self.onStopped()
            self.onUnload()

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)
        if (parameterName == "Mode"):
            self.tracker.setMode(newValue)
            return

        if (parameterName == "Width (m)"):
            self.tracker.registerTarget(self.targetName, newValue)
            return

        if (parameterName == "Distance X (m)"):
            self.distanceX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Distance Y (m)"):
            self.distanceY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Theta (rad)"):
            self.angleWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold X (m)"):
            self.thresholdX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Y (m)"):
            self.thresholdY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Theta (rad)"):
            self.thresholdWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if(parameterName == "Effector"):
            self.tracker.setEffector(newValue)
            self.effector = newValue
            return

    def onTargetLost(self, key, value, message):
        self.targetLost()

    def onTargetReached(self, key, value, message):

        self.targetReached()


    def onTargetChanged(self, key, value, message):
        if value == self.targetName and not self.subscribeDone:
            self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
            self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
            self.subscribeDone = True
        elif value != self.targetName and self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="targetLost" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is lost." id="5" /><Output name="targetReached" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is reached." id="6" /><Parameter name="Mode" inherits_from_parent="0" content_type="3" value="Head" default_value="Head" custom_choice="0" tooltip="Set tracker mode" id="7"><Choice value="Head" /><Choice value="WholeBody" /><Choice value="Move" /></Parameter><Parameter name="Effector" inherits_from_parent="0" content_type="3" value="None" default_value="None" custom_choice="0" tooltip="Set effector to use for tracking. Head is always used." id="8"><Choice value="None" /><Choice value="Arms" /><Choice value="LArm" /><Choice value="RArm" /></Parameter><Parameter name="Width (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="0.6" tooltip="Width of the face in meters" id="9" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0.01" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="10" /><Parameter name="Threshold X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="11" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="Distance on Y axis the robot will try to maintain from its target in move modes." id="12" /><Parameter name="Threshold Y (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="13" /><Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Wz angle of the vector robot-target the robot will try to maintain in move modes." id="14" /><Parameter name="Threshold Theta (rad)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="3.14" tooltip="Threshold of the angle of the vector robot-target above which the robot will move to track its target in move modes." id="15" /></Box><Box name="Tactile Head" id="17" localization="8" tooltip="Detect touch on head tactile sensor." x="2141" y="390"><bitmap>media/images/box/sensors/tactileHead.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" /><Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" /><Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" /><Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" /><Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" /><Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Head-sequence" type="Lock" timeout="0" /></Box><Box name="breakStoryMode" id="22" localization="8" tooltip="Enter description here" x="2294" y="323"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="onStopped_endStory" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Output name="justMisstake" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="118.921"><Box name="Speech Reco." id="6" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="293" y="82"><bitmap>media/images/box/interaction/ear.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                self.logger.debug("1")
                if (self.hasSubscribed):
                    self.logger.debug("2")
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                    self.logger.debug("3")
                if (self.hasPushed and self.asr):
                    self.logger.debug("4")
                    self.asr.pause(True)
                    self.logger.debug("5")
                    self.asr.popContexts()
                    self.logger.debug("5")
                    self.asr.pause(False)
                    self.logger.debug("6")

        except RuntimeError, e:
            self.mutex.release()
            self.logger.debug(e)
            #raise e
        except Exception , e:
            self.logger.debug(e)
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pause(True)
                self.asr.pushContexts()
                self.asr.pause(False)
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.logger.debug("in line 66")
            self.logger.debug(e)
            self.mutex.release()
            self.onUnload()

        try:
            self.mutex.release()
        except Exception, e:
            self.logger.debug(e)

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            if( self.bIsRunning ):
                self.onUnload()
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="wordRecognized" type="3" type_size="1" nature="1" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" /><Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" /><Parameter name="Word list" inherits_from_parent="0" content_type="3" value="不想;想;不要;好" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" /><Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="40" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" /><Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" /><Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Switch Case" id="3" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="448" y="91"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("不想")):
			self.output_1(p)
		elif(p == self.typeConversion("想")):
			self.output_2(p)
		elif(p == self.typeConversion("不要")):
			self.output_3(p)
		elif(p == self.typeConversion("好")):
			self.output_4(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>&quot;不想&quot;</keyword><keyword>&quot;想&quot;</keyword><keyword>&quot;不要&quot;</keyword><keyword>&quot;好&quot;</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /><Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" /></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="150" y="86"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="FancyRightArmCircle_LeanRight_01" id="55" localization="8" tooltip="ID : #01E 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- What?&#x0A;- Please&#x0A;- Maybe&#x0A;&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanRight" x="168" y="297"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="41"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="7" value="-3.60597" /><Key frame="12" value="6.5" /><Key frame="18" value="-3.60597" /><Key frame="41" value="-3.60597" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0"><Key frame="38" value="-7.03374" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0"><Key frame="38" value="-11.5114" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="15" value="-87.7" /><Key frame="27" value="-72.4" /><Key frame="35" value="-86.0436" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0"><Key frame="38" value="6.59429" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0"><Key frame="38" value="12.6588" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0"><Key frame="38" value="-14.7634" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0"><Key frame="38" value="12.3024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="15" value="26.9" /><Key frame="27" value="8.69887" /><Key frame="35" value="10.8962" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0"><Key frame="38" value="-8.69887" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0"><Key frame="38" value="-7.3805" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="88.5" /><Key frame="31" value="61.1" /><Key frame="38" value="88.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="24" value="95.0964" /><Key frame="38" value="45.8" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="14" value="0.25" /><Key frame="24" value="1" /><Key frame="31" value="0.37" /><Key frame="38" value="0.19" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0"><Key frame="38" value="7.81997" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0"><Key frame="38" value="9.75839" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0"><Key frame="38" value="-14.7634" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0"><Key frame="38" value="11.7799" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="61" /><Key frame="38" value="89.0367" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="24" value="-1.05711" /><Key frame="38" value="12.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="24" value="95.448" /><Key frame="38" value="2.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="27" value="-77.1713" /><Key frame="35" value="-67.5033" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="27" value="0.3036" /><Key frame="35" value="0.3036" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="27" value="88.5925" /><Key frame="35" value="88.5925" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="27" value="-31.5555" /><Key frame="35" value="-13.0104" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Say Text (1)" id="5" localization="8" tooltip="Say the text received on its input." x="2220" y="141"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Say Text (2)" id="7" localization="8" tooltip="Say the text received on its input." x="1553" y="477"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="CircleBothArmsLeaningFront_01" id="11" localization="8" tooltip="ID : #01F 0007&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Terrible&#x0A;- Damn!&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Flex&#x0A;End stance : Center" x="1556" y="589"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="48"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="12" value="-6.6" /><Key frame="21" value="6.1" /><Key frame="31" value="-4" /><Key frame="48" value="-3.7172" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="12" value="0" /><Key frame="16" value="-7.25865"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="21" value="5.17932"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="26" value="-6.92171"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="31" value="0" /><Key frame="48" value="-0.560471" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0"><Key frame="26" value="-9.58261" /><Key frame="48" value="4.57281" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0"><Key frame="26" value="-6.58948" /><Key frame="48" value="-6.92149" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-88.5" /><Key frame="21" value="-32.1" /><Key frame="31" value="-55.9" /><Key frame="39" value="-88.5" /><Key frame="48" value="-55.7311" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="12" value="-54.1" /><Key frame="31" value="-119.5" /><Key frame="48" value="-63.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="31" value="0.99" /><Key frame="48" value="0.47" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0"><Key frame="26" value="-16.6091" /><Key frame="48" value="6.8483" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0"><Key frame="26" value="4.57277" /><Key frame="48" value="4.78053" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0"><Key frame="26" value="-13.1813" /><Key frame="48" value="-10.0824" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0"><Key frame="26" value="25.0467" /><Key frame="48" value="-4.67968" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="12" value="69.9" /><Key frame="48" value="93.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="31" value="20.6" /><Key frame="48" value="2.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="31" value="-93.1" /><Key frame="48" value="-93.0581" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0"><Key frame="26" value="-8.25942" /><Key frame="48" value="4.71227" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0"><Key frame="26" value="7.38531" /><Key frame="48" value="6.81226" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="88.5" /><Key frame="21" value="32.1" /><Key frame="31" value="55.9" /><Key frame="39" value="88.5" /><Key frame="48" value="55.7311" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="54.1" /><Key frame="31" value="119.5" /><Key frame="48" value="63.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="31" value="0.99" /><Key frame="48" value="0.47" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0"><Key frame="26" value="-15.735" /><Key frame="48" value="6.94926" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0"><Key frame="26" value="-5.18321" /><Key frame="48" value="-5.3794" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0"><Key frame="26" value="-13.1813" /><Key frame="48" value="-10.0824" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0"><Key frame="26" value="22.9421" /><Key frame="48" value="-4.3059" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="12" value="69.9" /><Key frame="48" value="93.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="31" value="-29.7" /><Key frame="48" value="-2.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="31" value="93.1" /><Key frame="48" value="93.0586" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="GoToStance_Question_Center" id="8" localization="8" tooltip="ID : #01E 9991&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Transition&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="2059" y="221"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="38"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="16" value="-10.9565" /><Key frame="33" value="-19.5723" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="33" value="-2.90283" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="19" value="-14.4652" /><Key frame="34" value="-2.71089" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="34" value="-0.0120679" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="19" value="7.00987" /><Key frame="34" value="-0.617537" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="15" value="-16.1591" /><Key frame="31" value="-71.4384" /><Key frame="37" value="-65.9058" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="15" value="-106.392" /><Key frame="24" value="-104.546" /><Key frame="37" value="-114.039" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="15" value="0.5952" /><Key frame="24" value="0.5872" /><Key frame="31" value="0.45" /><Key frame="37" value="0.77" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="13" value="89.9987" /><Key frame="22" value="69.6" /><Key frame="35" value="96.5027" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="13" value="13.9296" /><Key frame="22" value="3.87988" /><Key frame="35" value="0.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="15" value="-72.5131" /><Key frame="24" value="-77.6987" /><Key frame="37" value="-61.8782" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="16" value="13.8632" /><Key frame="32" value="74.8507" /><Key frame="38" value="66.9498" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="16" value="95.9079" /><Key frame="25" value="94.9411" /><Key frame="38" value="105.927" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="16" value="0.5484" /><Key frame="25" value="0.5412" /><Key frame="32" value="0.45" /><Key frame="38" value="0.77" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="87.191" /><Key frame="23" value="69.6" /><Key frame="36" value="99.4079" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-14.1495" /><Key frame="23" value="-6.1213" /><Key frame="36" value="-0.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="16" value="86.3073" /><Key frame="25" value="88.5046" /><Key frame="38" value="74.6177" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="story_pause_text" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="35" y="254"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)

        self.logger.debug(json_data["story_pause"].encode("utf8"))
        self.onStopped(json_data["story_pause"].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="story_stop_text" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1657" y="204"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)

        self.logger.debug(json_data["story_stop"].encode("utf8"))
        self.onStopped(json_data["story_stop"].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="story_resume_text" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1265" y="473"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)

        self.logger.debug(json_data["story_resume"].encode("utf8"))
        self.onStopped(json_data["story_resume"].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Chill" id="18" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="338" y="318"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Chill (1)" id="10" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="2254" y="254"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Chill (2)" id="12" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="1753" y="602"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text (3)" id="13" localization="8" tooltip="Say the text received on its input." x="1029" y="215"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="14" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="713" y="221"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("那你還想要聽別的故事嗎?")]]></content></script><pluginContent><text><![CDATA[那你還想要聽別的故事嗎?]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Speech Reco. (1)" id="15" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="1208" y="168"><bitmap>media/images/box/interaction/ear.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                self.logger.debug("1")
                if (self.hasSubscribed):
                    self.logger.debug("2")
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                    self.logger.debug("3")
                if (self.hasPushed and self.asr):
                    self.logger.debug("4")
                    self.asr.pause(True)
                    self.logger.debug("5")
                    self.asr.popContexts()
                    self.logger.debug("5")
                    self.asr.pause(False)
                    self.logger.debug("6")

        except RuntimeError, e:
            self.mutex.release()
            self.logger.debug(e)
            #raise e
        except Exception , e:
            self.logger.debug(e)
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pause(True)
                self.asr.pushContexts()
                self.asr.pause(False)
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.logger.debug("in line 66")
            self.logger.debug(e)
            self.mutex.release()
            self.onUnload()

        try:
            self.mutex.release()
        except Exception, e:
            self.logger.debug(e)

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            if( self.bIsRunning ):
                self.onUnload()
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="wordRecognized" type="3" type_size="1" nature="1" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" /><Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" /><Parameter name="Word list" inherits_from_parent="0" content_type="3" value="繼續點故事;不聽了" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" /><Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="40" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" /><Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" /><Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Switch Case (1)" id="16" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="1382" y="164"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("不聽了")):
			self.output_1(p)
		elif(p == self.typeConversion("繼續點故事")):
			self.output_2(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>&quot;不聽了&quot;</keyword><keyword>&quot;繼續點故事&quot;</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /></Box><Box name="save story temp" id="17" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1756" y="114"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memProxy = ALProxy("ALMemory","localhost",9559)
        #save data to

        memProxy.insertData("IS_CONTINUE_STORY_MODE",1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="5" /><Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="0" indexofinput="3" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="55" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="7" /><Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="18" indexofinput="2" outputowner="55" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="14" indexofoutput="3" /><Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="16" indexofoutput="4" /><Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="3" /><Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="5" /><Link inputowner="0" indexofinput="3" outputowner="17" indexofoutput="4" /><Link inputowner="16" indexofinput="2" outputowner="15" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="GateWay" id="20" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="314" y="33"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="TCUpdate" id="23" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="332" y="384"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import requests
from naoqi import ALProxy
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memProxy = ALProxy("ALMemory","localhost",9559)


        raw_response_data = requests.get("http://service.inmedia.com.tw/task/api/pepper.do")

        if raw_response_data.status_code == requests.codes.ok:

            #insertData. Value can be int, float, list, string
            voice_json=json.loads(raw_response_data.text)["voices"]

            memProxy.insertData("TC_JSON_DATA",json.dumps(voice_json))
            self.logger.debug("TC is aready updated!")

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="showStringToHTML (1)" id="26" localization="8" tooltip="" x="1214" y="1402"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="showWelcomeTitile" id="29" localization="8" tooltip="Enter description here" x="1299" y="375"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Text Edit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Text Edit" id="24" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="778" y="252"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("今天想要聽什麼故事呢?\n<br/>       說出『我要聽故事』<br/>      等Pepper回應後，再說出故事名稱")]]></content></script><pluginContent><text><![CDATA[今天想要聽什麼故事呢?
<br/>       說出『我要聽故事』<br/>      等Pepper回應後，再說出故事名稱]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="showStringToHTML" id="25" localization="8" tooltip="" x="1345" y="314"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Chill" id="18" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="673" y="371"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="25" indexofinput="2" outputowner="24" indexofoutput="3" /><Link inputowner="24" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="SayHi" id="24" localization="8" tooltip="Enter description here" x="759" y="457"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Tactile Head (1)_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="input" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" /><Output name="stop_voice_recognize_event" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Output name="start_voice_event" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Tactile Head (1)" id="30" localization="8" tooltip="Detect touch on head tactile sensor." x="359" y="226"><bitmap>media/images/box/sensors/tactileHead.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" /><Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" /><Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" /><Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" /><Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" /><Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Head-sequence" type="Lock" timeout="0" /></Box><Box name="LittleFancyBothArmsInFront_01" id="3" localization="8" tooltip="ID : #01G 0014&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- And&#x0A;- Once&#x0A;- All&#x0A;- More&#x0A;- Then&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="644" y="366"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="48"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="8" value="-7.12098" /><Key frame="19" value="-14.9413" /><Key frame="28" value="-5.02098" /><Key frame="36" value="-10.7225" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="19" value="4.39218" /><Key frame="28" value="4.39218" /><Key frame="36" value="3.33748" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="10" value="-2.66947" /><Key frame="27" value="-11.3974" /><Key frame="38" value="-2.80876" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="10" value="-0.473543" /><Key frame="38" value="-0.473543" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="10" value="0.541706" /><Key frame="27" value="6.23496" /><Key frame="38" value="0.351951" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="8" value="-55.2184" /><Key frame="14" value="-63.5682" /><Key frame="27" value="-27.275" /><Key frame="36" value="-52.2817" /><Key frame="47" value="-63.9197" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="7" value="-85.1814" /><Key frame="13" value="-83.6873" /><Key frame="24" value="-108.561" /><Key frame="35" value="-90.367" /><Key frame="46" value="-85.2693" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="8" value="0.1212" /><Key frame="14" value="0.044" /><Key frame="25" value="0.74" /><Key frame="36" value="0.1936" /><Key frame="47" value="0.0408" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="8" value="83.5749" /><Key frame="14" value="82.6081" /><Key frame="19" value="73.2822" /><Key frame="25" value="83.2234" /><Key frame="36" value="85.7722" /><Key frame="47" value="83.2234" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="8" value="18.4037" /><Key frame="14" value="19.4584" /><Key frame="26" value="34.3576" /><Key frame="36" value="16.3459" /><Key frame="47" value="14.8517" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="8" value="-19.9538" /><Key frame="14" value="-25.9305" /><Key frame="25" value="-51.3312" /><Key frame="36" value="-34.1923" /><Key frame="47" value="-28.4793" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="8" value="56.1022" /><Key frame="14" value="62.3425" /><Key frame="27" value="38.8761" /><Key frame="36" value="54.0443" /><Key frame="47" value="62.3425" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="8" value="91.0328" /><Key frame="14" value="88.2203" /><Key frame="25" value="107.35" /><Key frame="36" value="87.3414" /><Key frame="47" value="88.2203" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="8" value="0.1116" /><Key frame="14" value="0.036" /><Key frame="25" value="0.77" /><Key frame="36" value="0.1884" /><Key frame="47" value="0.0308" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="8" value="93.4158" /><Key frame="14" value="90.2517" /><Key frame="19" value="77.6143" /><Key frame="25" value="88.6697" /><Key frame="36" value="87.7908" /><Key frame="47" value="88.6697" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="9" value="-22.4871" /><Key frame="15" value="-21.8719" /><Key frame="26" value="-31.8006" /><Key frame="37" value="-22.7508" /><Key frame="48" value="-21.2567" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="8" value="29.7929" /><Key frame="14" value="31.1113" /><Key frame="25" value="32.7812" /><Key frame="36" value="31.7265" /><Key frame="47" value="32.7812" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="1126" y="282"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Chill" id="18" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="815" y="377"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="text" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="809" y="255"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)

        self.logger.debug(json_data["pepper_greeting"].encode("utf8"))
        self.onStopped(json_data["pepper_greeting"].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Python Script" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="958" y="119"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        self.logger.debug("go to stopped voice reco.")
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="showStringToHTML" id="25" localization="8" tooltip="" x="1044" y="411"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="30" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="30" indexofoutput="9" /><Link inputowner="18" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="30" indexofoutput="9" /><Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="25" indexofinput="2" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="SayBye" id="27" localization="8" tooltip="Enter description here" x="576" y="429"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Tactile L.Hand_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="input" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" /><Output name="stop_voice_reco_event" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Output name="start_voice_reco_event" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Tactile L.Hand" id="25" localization="8" tooltip="Detect touch on left hand tactile sensor." x="454" y="191"><bitmap>media/images/box/movement/move_leftarm.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="HLLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftLeftTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" /><Input name="HLBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftBackTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" /><Input name="HLRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftRightTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" /><Output name="leftTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The left of the left hand was touched." id="8" /><Output name="backTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The back of the left hand was touched." id="9" /><Output name="rightTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The right of the left hand was touched." id="10" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="if &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="142"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="if &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="39"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="if &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="246"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="8" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Left arm-sequence" type="Lock" timeout="0" /></Box><Box name="WideBothArmsCircle_LeanLeft_01" id="10" localization="8" tooltip="ID : #01F 0029&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Wow&#x0A;- Awesome&#x0A;- Great!&#x0A;- Yoohoo&#x0A;- Impressive&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanLeft&#x0A;End stance : LeanLeft" x="746" y="316"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="57"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-5.77728" /><Key frame="22" value="0.838254" /><Key frame="32" value="-33.6618" /><Key frame="38" value="-17.8618" /><Key frame="55" value="-19.5763" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="3.95273" /><Key frame="22" value="4.83163" /><Key frame="32" value="7.11683" /><Key frame="38" value="5.88634" /><Key frame="55" value="5.18321" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="14" value="-79.1002" /><Key frame="23" value="-88.5" /><Key frame="30" value="-80.3306" /><Key frame="40" value="-53.3" /><Key frame="57" value="-46.4923" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="14" value="-80.1254" /><Key frame="23" value="-90.8344" /><Key frame="30" value="-111.712" /><Key frame="40" value="-98.5203" /><Key frame="57" value="-100.462" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="14" value="0.2484" /><Key frame="23" value="0.2496" /><Key frame="30" value="0.86" /><Key frame="40" value="0.76" /><Key frame="57" value="0.7656" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="14" value="58.8851" /><Key frame="23" value="46.2286" /><Key frame="30" value="26.7" /><Key frame="40" value="14.6" /><Key frame="57" value="43.4161" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="14" value="24.673" /><Key frame="23" value="18.4308" /><Key frame="30" value="50.8141" /><Key frame="40" value="62.3702" /><Key frame="57" value="61.5592" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="14" value="-38.9384" /><Key frame="23" value="-30.1493" /><Key frame="30" value="-48.7823" /><Key frame="40" value="-46.1456" /><Key frame="57" value="-61.8782" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="77.8745" /><Key frame="20" value="88.1578" /><Key frame="33" value="81.7417" /><Key frame="41" value="53.3" /><Key frame="56" value="44.8272" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="90.071" /><Key frame="20" value="98.4943" /><Key frame="33" value="119.581" /><Key frame="41" value="115.799" /><Key frame="56" value="117.648" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="14" value="0.056" /><Key frame="20" value="0.05" /><Key frame="33" value="0.86" /><Key frame="41" value="0.76" /><Key frame="56" value="0.774" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="68.9095" /><Key frame="20" value="47.376" /><Key frame="33" value="26.7" /><Key frame="41" value="14.6" /><Key frame="56" value="41.0478" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-26.1581" /><Key frame="20" value="-21.8155" /><Key frame="33" value="-59.5509" /><Key frame="41" value="-59.8143" /><Key frame="56" value="-56.4593" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="14" value="24.7831" /><Key frame="20" value="23.2889" /><Key frame="33" value="29.8808" /><Key frame="41" value="34.0996" /><Key frame="56" value="56.5999" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="21" value="-13.4923" /><Key frame="31" value="-5.2786" /><Key frame="39" value="-2.88026" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="21" value="-0.03992" /><Key frame="31" value="5.32732" /><Key frame="54" value="9.00125" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="21" value="7.32156" /><Key frame="31" value="1.19837" /><Key frame="39" value="0.555541" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Tactile R.Hand" id="1" localization="8" tooltip="Detect touch on right hand tactile sensor." x="462" y="306"><bitmap>media/images/box/movement/move_arm.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="HRLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightLeftTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" /><Input name="HRBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightBackTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" /><Input name="HRRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightRightTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" /><Output name="leftTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The left of the right hand was touched." id="8" /><Output name="backTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The back of the right hand was touched." id="9" /><Output name="rightTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The right of the right hand was touched." id="10" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="if &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="130"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="if &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="28"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="if &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="232"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="8" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Right arm-sequence" type="Lock" timeout="0" /></Box><Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="1030" y="107"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Chill" id="18" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="970" y="342"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="168"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="-8.2054" /><Key frame="27" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="33" value="-8.2054" /><Key frame="39" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="45" value="-8.2054" /><Key frame="51" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="57" value="-8.2054" /><Key frame="62" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-8.2054" /><Key frame="78" value="-4.4" /><Key frame="95" value="-6.2" /><Key frame="109" value="0.4" /><Key frame="125" value="-4.37083"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="135" value="-8.2054" /><Key frame="168" value="-11.4114" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-0.320832" /><Key frame="33" value="-0.320832" /><Key frame="45" value="-0.320832" /><Key frame="57" value="-0.320832" /><Key frame="68" value="-0.320832" /><Key frame="95" value="-23" /><Key frame="135" value="32.2" /><Key frame="168" value="-0.475968" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2.34809"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-2.05019" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="18" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-2"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.0734769" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="40" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="63" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="85" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="111" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="133" value="-0.634643"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="168" value="-0.546803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-30.0511" /><Key frame="45" value="-30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-30.042" /><Key frame="116" value="-30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-30.042" /><Key frame="168" value="-29.914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-70.4534" /><Key frame="45" value="-71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-71.892" /><Key frame="116" value="-70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-71.892" /><Key frame="168" value="-70.7468" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.602" /><Key frame="45" value="0.81"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.82" /><Key frame="116" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.82" /><Key frame="168" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="88.6313" /><Key frame="45" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="86.2174" /><Key frame="116" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="86.2174" /><Key frame="168" value="88.97" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="12" /><Key frame="45" value="5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="5.64113" /><Key frame="116" value="12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="5.64113" /><Key frame="168" value="7.9964" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="2.11994" /><Key frame="45" value="0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.974028" /><Key frame="116" value="2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.974028" /><Key frame="168" value="0.219115" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="30.042" /><Key frame="45" value="30.0511"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="30.0511" /><Key frame="116" value="30.042"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="30.0511" /><Key frame="168" value="29.853" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="71.892" /><Key frame="45" value="70.4534"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="70.4534" /><Key frame="116" value="71.892"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="70.4534" /><Key frame="168" value="70.3747" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.76" /><Key frame="45" value="0.602"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="0.602" /><Key frame="116" value="0.85"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="0.602" /><Key frame="168" value="0.603375" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="86.2174" /><Key frame="45" value="88.6313"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="88.6313" /><Key frame="116" value="86.2174"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="88.6313" /><Key frame="168" value="89.137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-5.64113" /><Key frame="45" value="-12"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-12" /><Key frame="116" value="-5.64113"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-12" /><Key frame="168" value="-8.18067" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="-0.974028" /><Key frame="45" value="-2.11994"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="68" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="90" value="-2.11994" /><Key frame="116" value="-0.974028"><Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" /><Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" /></Key><Key frame="138" value="-2.11994" /><Key frame="168" value="-0.483075" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="text" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="765" y="115"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # #activate the output of the box
        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("TC_JSON_DATA")
        self.logger.debug((json.loads(data)))
        json_data = json.loads(data)

        self.logger.debug(json_data["pepper_bye"].encode("utf8"))
        self.onStopped(json_data["pepper_bye"].encode("utf8"))
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="showStringToHTML" id="3" localization="8" tooltip="" x="1040" y="212"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, keyword):
        # hide if already existing
        # self.hideQuestion()
        # show the new question
        self.showQuestion(keyword)
        # move
        self.onStopped()




    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def showQuestion(self, p):
        self.logger.debug(str(p) )
        self._getMemoryService().insertData('keyword', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hideQuestion(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="25" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="9" /><Link inputowner="10" indexofinput="2" outputowner="25" indexofoutput="9" /><Link inputowner="18" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="25" indexofoutput="9" /><Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="9" /><Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Python Script" id="25" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="2826" y="544"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        memProxy = ALProxy("ALMemory","localhost",9559)
        data = memProxy.getData("IS_CONTINUE_STORY_MODE")
        if(data ==1):

            self.continue_story_mode()

        else:
            self.stop_end()




    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="stop_end" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="continue_story_mode" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="TCInit" id="28" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="410" y="1638"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import requests
from naoqi import ALProxy
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memProxy = ALProxy("ALMemory","localhost",9559)
        back_up_json = {"story_pause":"我說的故事好聽嗎？你想繼續聽故事嗎？","chat_start":"你想知道什麼呢？","story_start":"你想要聽什麼故事呢？","story_stop":"好吧！那我們下次再繼續。","face_detection":["歡迎光臨，資策會服創所歡迎您","你好，我會說故事給你聽喔，跟我說故事名就可以囉","嗨，今天想要聽什麼故事呢？"],"pepper_greeting":"你好，我是Pepper，我很會說故事喔！我有許多關於動物的有趣故事想要說給你聽，你想聽故事嗎？說故事時間要開始囉！","pepper_bye":"這次的說故事時間要結束了，我們下次在一起聽故事喔！拜拜！","story_resume":"好喔，那我繼續播放囉！"}

        raw_response_data = requests.get("http://service.inmedia.com.tw/task/api/pepper.do")

        if raw_response_data.status_code == requests.codes.ok:

            #insertData. Value can be int, float, list, string
            voice_json=json.loads(raw_response_data.text)["voices"]

            memProxy.insertData("TC_JSON_DATA",json.dumps(voice_json))

            self.logger.debug("TC is aready inited!")
        else:
            #set default mem data
            memProxy.insertData("TC_JSON_DATA", json.dumps(back_up_json))
        memProxy.insertData("IS_CONTINUE_STORY_MODE",0)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="10" indexofoutput="5" /><Link inputowner="12" indexofinput="2" outputowner="9" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="5" /><Link inputowner="12" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="3" /><Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="5" /><Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="16" indexofinput="2" outputowner="15" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="16" indexofoutput="3" /><Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="5" /><Link inputowner="12" indexofinput="2" outputowner="15" indexofoutput="5" /><Link inputowner="21" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="6" /><Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="3" /><Link inputowner="18" indexofinput="3" outputowner="6" indexofoutput="5" /><Link inputowner="18" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="18" indexofinput="2" outputowner="12" indexofoutput="3" /><Link inputowner="5" indexofinput="4" outputowner="17" indexofoutput="9" /><Link inputowner="17" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="22" indexofinput="2" outputowner="17" indexofoutput="9" /><Link inputowner="17" indexofinput="3" outputowner="17" indexofoutput="9" /><Link inputowner="5" indexofinput="5" outputowner="22" indexofoutput="4" /><Link inputowner="17" indexofinput="2" outputowner="22" indexofoutput="4" /><Link inputowner="19" indexofinput="3" outputowner="6" indexofoutput="5" /><Link inputowner="18" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="20" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="20" indexofinput="2" outputowner="7" indexofoutput="3" /><Link inputowner="6" indexofinput="2" outputowner="20" indexofoutput="4" /><Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" /><Link inputowner="29" indexofinput="2" outputowner="20" indexofoutput="4" /><Link inputowner="26" indexofinput="2" outputowner="15" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="24" indexofinput="2" outputowner="20" indexofoutput="4" /><Link inputowner="20" indexofinput="2" outputowner="12" indexofoutput="3" /><Link inputowner="27" indexofinput="2" outputowner="20" indexofoutput="4" /><Link inputowner="27" indexofinput="3" outputowner="6" indexofoutput="5" /><Link inputowner="24" indexofinput="3" outputowner="6" indexofoutput="5" /><Link inputowner="6" indexofinput="3" outputowner="24" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="24" indexofoutput="5" /><Link inputowner="6" indexofinput="3" outputowner="27" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="27" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="24" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="27" indexofoutput="5" /><Link inputowner="17" indexofinput="3" outputowner="5" indexofoutput="6" /><Link inputowner="5" indexofinput="3" outputowner="22" indexofoutput="3" /><Link inputowner="25" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="20" indexofinput="2" outputowner="25" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="25" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="25" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>